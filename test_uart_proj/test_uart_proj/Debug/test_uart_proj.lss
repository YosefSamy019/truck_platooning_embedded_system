
test_uart_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000034c  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800076  00800076  000003f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001089  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ab  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095c  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  000027cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b4f  00000000  00000000  00002f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003a66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  8a:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_send_cmd>:
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9b 7f       	andi	r25, 0xFB	; 251
  96:	98 bb       	out	0x18, r25	; 24
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	9d 7f       	andi	r25, 0xFD	; 253
  9c:	98 bb       	out	0x18, r25	; 24
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 70       	andi	r25, 0x0F	; 15
  a2:	28 2f       	mov	r18, r24
  a4:	20 7f       	andi	r18, 0xF0	; 240
  a6:	92 2b       	or	r25, r18
  a8:	9b bb       	out	0x1b, r25	; 27
  aa:	98 b3       	in	r25, 0x18	; 24
  ac:	98 60       	ori	r25, 0x08	; 8
  ae:	98 bb       	out	0x18, r25	; 24
  b0:	ef e3       	ldi	r30, 0x3F	; 63
  b2:	ff e1       	ldi	r31, 0x1F	; 31
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_send_cmd+0x22>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_send_cmd+0x28>
  ba:	00 00       	nop
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	97 7f       	andi	r25, 0xF7	; 247
  c0:	98 bb       	out	0x18, r25	; 24
  c2:	ef e3       	ldi	r30, 0x3F	; 63
  c4:	ff e1       	ldi	r31, 0x1F	; 31
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_send_cmd+0x34>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_send_cmd+0x3a>
  cc:	00 00       	nop
  ce:	2b b3       	in	r18, 0x1b	; 27
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	92 2f       	mov	r25, r18
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	89 2b       	or	r24, r25
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	88 bb       	out	0x18, r24	; 24
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	9f e1       	ldi	r25, 0x1F	; 31
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_send_cmd+0x58>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_send_cmd+0x5e>
  f0:	00 00       	nop
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	87 7f       	andi	r24, 0xF7	; 247
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	9f ef       	ldi	r25, 0xFF	; 255
  fa:	e9 ef       	ldi	r30, 0xF9	; 249
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	91 50       	subi	r25, 0x01	; 1
 100:	e0 40       	sbci	r30, 0x00	; 0
 102:	f0 40       	sbci	r31, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <lcd_send_cmd+0x6c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <lcd_send_cmd+0x76>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <lcd_init>:
 10c:	87 b3       	in	r24, 0x17	; 23
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	87 bb       	out	0x17, r24	; 23
 112:	87 b3       	in	r24, 0x17	; 23
 114:	82 60       	ori	r24, 0x02	; 2
 116:	87 bb       	out	0x17, r24	; 23
 118:	87 b3       	in	r24, 0x17	; 23
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	87 bb       	out	0x17, r24	; 23
 11e:	8a b3       	in	r24, 0x1a	; 26
 120:	80 6f       	ori	r24, 0xF0	; 240
 122:	8a bb       	out	0x1a, r24	; 26
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	89 ef       	ldi	r24, 0xF9	; 249
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <lcd_init+0x1e>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_init+0x28>
 134:	00 00       	nop
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 13c:	88 e2       	ldi	r24, 0x28	; 40
 13e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 142:	8f e0       	ldi	r24, 0x0F	; 15
 144:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	89 ef       	ldi	r24, 0xF9	; 249
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <lcd_init+0x4e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_init+0x58>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <lcd_send_data>:
 168:	98 b3       	in	r25, 0x18	; 24
 16a:	9b 7f       	andi	r25, 0xFB	; 251
 16c:	98 bb       	out	0x18, r25	; 24
 16e:	98 b3       	in	r25, 0x18	; 24
 170:	92 60       	ori	r25, 0x02	; 2
 172:	98 bb       	out	0x18, r25	; 24
 174:	9b b3       	in	r25, 0x1b	; 27
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	28 2f       	mov	r18, r24
 17a:	20 7f       	andi	r18, 0xF0	; 240
 17c:	92 2b       	or	r25, r18
 17e:	9b bb       	out	0x1b, r25	; 27
 180:	98 b3       	in	r25, 0x18	; 24
 182:	98 60       	ori	r25, 0x08	; 8
 184:	98 bb       	out	0x18, r25	; 24
 186:	ef e3       	ldi	r30, 0x3F	; 63
 188:	ff e1       	ldi	r31, 0x1F	; 31
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_send_data+0x22>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <lcd_send_data+0x28>
 190:	00 00       	nop
 192:	98 b3       	in	r25, 0x18	; 24
 194:	97 7f       	andi	r25, 0xF7	; 247
 196:	98 bb       	out	0x18, r25	; 24
 198:	ef e3       	ldi	r30, 0x3F	; 63
 19a:	ff e1       	ldi	r31, 0x1F	; 31
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_send_data+0x34>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_send_data+0x3a>
 1a2:	00 00       	nop
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	f0 e1       	ldi	r31, 0x10	; 16
 1a8:	8f 9f       	mul	r24, r31
 1aa:	c0 01       	movw	r24, r0
 1ac:	11 24       	eor	r1, r1
 1ae:	92 2f       	mov	r25, r18
 1b0:	9f 70       	andi	r25, 0x0F	; 15
 1b2:	89 2b       	or	r24, r25
 1b4:	8b bb       	out	0x1b, r24	; 27
 1b6:	88 b3       	in	r24, 0x18	; 24
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	8f e3       	ldi	r24, 0x3F	; 63
 1be:	9f e1       	ldi	r25, 0x1F	; 31
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_send_data+0x58>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_send_data+0x5e>
 1c6:	00 00       	nop
 1c8:	88 b3       	in	r24, 0x18	; 24
 1ca:	87 7f       	andi	r24, 0xF7	; 247
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	9f ef       	ldi	r25, 0xFF	; 255
 1d0:	e9 ef       	ldi	r30, 0xF9	; 249
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	91 50       	subi	r25, 0x01	; 1
 1d6:	e0 40       	sbci	r30, 0x00	; 0
 1d8:	f0 40       	sbci	r31, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <lcd_send_data+0x6c>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_send_data+0x76>
 1de:	00 00       	nop
 1e0:	08 95       	ret

000001e2 <lcd_send_str>:
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <lcd_send_str+0xe>
 1ea:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_send_data>
 1ee:	21 96       	adiw	r28, 0x01	; 1
 1f0:	88 81       	ld	r24, Y
 1f2:	81 11       	cpse	r24, r1
 1f4:	fa cf       	rjmp	.-12     	; 0x1ea <lcd_send_str+0x8>
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <lcd_set_cursor>:
 1fc:	88 23       	and	r24, r24
 1fe:	19 f0       	breq	.+6      	; 0x206 <lcd_set_cursor+0xa>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	21 f0       	breq	.+8      	; 0x20c <lcd_set_cursor+0x10>
 204:	07 c0       	rjmp	.+14     	; 0x214 <lcd_set_cursor+0x18>
 206:	86 2f       	mov	r24, r22
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	05 c0       	rjmp	.+10     	; 0x216 <lcd_set_cursor+0x1a>
 20c:	80 e4       	ldi	r24, 0x40	; 64
 20e:	86 0f       	add	r24, r22
 210:	80 68       	ori	r24, 0x80	; 128
 212:	01 c0       	rjmp	.+2      	; 0x216 <lcd_set_cursor+0x1a>
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 21a:	08 95       	ret

0000021c <lcd_clear>:
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 222:	08 95       	ret

00000224 <uartISR>:
#include "MCAL/UART/UART_Bluetooth.h"

#include "HAL/LCD/LCD.h"


void uartISR(u8 c){
 224:	cf 93       	push	r28
 226:	c8 2f       	mov	r28, r24
	lcd_send_data('$');
	lcd_send_data(c);
	_delay_ms(10);
	CLEAR_BIT(PORTD,3);*/
	
	lcd_set_cursor(0,0);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_set_cursor>
	lcd_clear();
 230:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_clear>
	lcd_send_data(c);
 234:	8c 2f       	mov	r24, r28
 236:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_send_data>
}
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <main>:

int main(void)
{
	sei();
 23e:	78 94       	sei
	
	UART_init();
 240:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <UART_init>
	lcd_init();
 244:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_init>
	
	CLR_BIT(DDRB,0);
 248:	87 b3       	in	r24, 0x17	; 23
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRC,2);
 24e:	84 b3       	in	r24, 0x14	; 20
 250:	84 60       	ori	r24, 0x04	; 4
 252:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRD,3);
 254:	81 b3       	in	r24, 0x11	; 17
 256:	88 60       	ori	r24, 0x08	; 8
 258:	81 bb       	out	0x11, r24	; 17
	SET_BIT(PORTC,2);
 25a:	85 b3       	in	r24, 0x15	; 21
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	85 bb       	out	0x15, r24	; 21

	lcd_send_str("UART TESTER");
 260:	80 e6       	ldi	r24, 0x60	; 96
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_send_str>
	UART_sendStr("Send Test");
 268:	8c e6       	ldi	r24, 0x6C	; 108
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <UART_sendStr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	87 ea       	ldi	r24, 0xA7	; 167
 274:	91 e6       	ldi	r25, 0x61	; 97
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x38>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x42>
 280:	00 00       	nop
	_delay_ms(2000);
	
	lcd_clear();
 282:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_clear>
	lcd_set_cursor(0,0);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_set_cursor>
	
	UART_onReceive(uartISR);
 28e:	82 e1       	ldi	r24, 0x12	; 18
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 72 01 	call	0x2e4	; 0x2e4 <UART_onReceive>
	
    while (1) 
    {
		
		if(GET_BIT(PINB,0)==1){
 296:	b0 9b       	sbis	0x16, 0	; 22
 298:	09 c0       	rjmp	.+18     	; 0x2ac <main+0x6e>
			lcd_clear();
 29a:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_clear>
			lcd_set_cursor(0,0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_set_cursor>
			SET_BIT(PORTC,2);
 2a6:	85 b3       	in	r24, 0x15	; 21
 2a8:	84 60       	ori	r24, 0x04	; 4
 2aa:	85 bb       	out	0x15, r24	; 21
		}
		CLR_BIT(PORTC,2);
 2ac:	85 b3       	in	r24, 0x15	; 21
 2ae:	8b 7f       	andi	r24, 0xFB	; 251
 2b0:	85 bb       	out	0x15, r24	; 21

    }
 2b2:	f1 cf       	rjmp	.-30     	; 0x296 <main+0x58>

000002b4 <UART_init>:
void UART_init(void) {
	unsigned int ubrr = MYUBRR;
	unsigned int ubrrH = (u8)(ubrr >> 8);
	
		// Enable receiver and transmitter
		UCSRB = (1 << RXEN) | (1 << TXEN);
 2b4:	88 e1       	ldi	r24, 0x18	; 24
 2b6:	8a b9       	out	0x0a, r24	; 10
	
		// Set frame format: 8 data bits, 1 stop bit
		UCSRC = (1 << UCSZ1) | (1 << UCSZ0);
 2b8:	86 e0       	ldi	r24, 0x06	; 6
 2ba:	80 bd       	out	0x20, r24	; 32
	
	// Set baud rate
	UBRRH = (u8)ubrrH;
 2bc:	10 bc       	out	0x20, r1	; 32
	UBRRL = (u8)ubrr;
 2be:	87 e6       	ldi	r24, 0x67	; 103
 2c0:	89 b9       	out	0x09, r24	; 9
 2c2:	08 95       	ret

000002c4 <UART_sendStr>:
		


}

void UART_sendStr(u8 str[]) {
 2c4:	ac 01       	movw	r20, r24
	int i = 0;
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
	while (str[i] != '\0') {
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <UART_sendStr+0x12>
		while (!(UCSRA & (1 << UDRE)));  // Wait until buffer is empty
 2cc:	5d 9b       	sbis	0x0b, 5	; 11
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <UART_sendStr+0x8>
		UDR = str[i];                     // Put data into buffer, sends the data
 2d0:	9c b9       	out	0x0c, r25	; 12
		i++;
 2d2:	2f 5f       	subi	r18, 0xFF	; 255
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255

}

void UART_sendStr(u8 str[]) {
	int i = 0;
	while (str[i] != '\0') {
 2d6:	fa 01       	movw	r30, r20
 2d8:	e2 0f       	add	r30, r18
 2da:	f3 1f       	adc	r31, r19
 2dc:	90 81       	ld	r25, Z
 2de:	91 11       	cpse	r25, r1
 2e0:	f5 cf       	rjmp	.-22     	; 0x2cc <UART_sendStr+0x8>
		while (!(UCSRA & (1 << UDRE)));  // Wait until buffer is empty
		UDR = str[i];                     // Put data into buffer, sends the data
		i++;
	}
}
 2e2:	08 95       	ret

000002e4 <UART_onReceive>:

void UART_onReceive(void (*ptr2fun)(u8)) {
	UART_receiveCallback = ptr2fun;
 2e4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 2e8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
	// Enable the UART Receive Complete interrupt
	UCSRB |= (1 << RXCIE);
 2ec:	8a b1       	in	r24, 0x0a	; 10
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	8a b9       	out	0x0a, r24	; 10
 2f2:	08 95       	ret

000002f4 <__vector_13>:
}

ISR(USART_RXC_vect) {
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	if (UART_receiveCallback) {
 316:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
 31a:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__data_end+0x1>
 31e:	30 97       	sbiw	r30, 0x00	; 0
 320:	11 f0       	breq	.+4      	; 0x326 <__vector_13+0x32>
		u8 receivedChar = (u8)UDR;  // Read the received data
 322:	8c b1       	in	r24, 0x0c	; 12
		UART_receiveCallback(receivedChar);  // Call the user-defined function
 324:	09 95       	icall
	}
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
