
master_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000a5c  00000af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800064  00800064  00000af4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001795  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c69  00000000  00000000  000024ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e83  00000000  00000000  00003116  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00003f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d0  00000000  00000000  00004340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d2  00000000  00000000  00004a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000053e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_10>
  2c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 01 	call	0x242	; 0x242 <main>
  8a:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MOTOR_control>:
	DIO_digitalWrite(IN4, LOW);
}

void MOTOR_setDutyCycle(char speed) {
	// This function is assumed to call TIMER0_setDutyCycle from timer0 driver
	TIMER0_setDutyCycle(speed);
  92:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <currentMotion>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	09 f4       	brne	.+2      	; 0x9c <MOTOR_control+0xa>
  9a:	40 c0       	rjmp	.+128    	; 0x11c <MOTOR_control+0x8a>
  9c:	20 f0       	brcs	.+8      	; 0xa6 <MOTOR_control+0x14>
  9e:	82 30       	cpi	r24, 0x02	; 2
  a0:	09 f4       	brne	.+2      	; 0xa4 <MOTOR_control+0x12>
  a2:	77 c0       	rjmp	.+238    	; 0x192 <MOTOR_control+0x100>
  a4:	08 95       	ret
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	21 f0       	breq	.+8      	; 0xb6 <MOTOR_control+0x24>
  ae:	a0 f0       	brcs	.+40     	; 0xd8 <MOTOR_control+0x46>
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	19 f1       	breq	.+70     	; 0xfa <MOTOR_control+0x68>
  b4:	08 95       	ret
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	84 ec       	ldi	r24, 0xC4	; 196
  ba:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	85 ec       	ldi	r24, 0xC5	; 197
  c2:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	86 ec       	ldi	r24, 0xC6	; 198
  ca:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	87 ec       	ldi	r24, 0xC7	; 199
  d2:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
  d6:	08 95       	ret
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	84 ec       	ldi	r24, 0xC4	; 196
  dc:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	85 ec       	ldi	r24, 0xC5	; 197
  e4:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	86 ec       	ldi	r24, 0xC6	; 198
  ec:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	87 ec       	ldi	r24, 0xC7	; 199
  f4:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
  f8:	08 95       	ret
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	84 ec       	ldi	r24, 0xC4	; 196
  fe:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	85 ec       	ldi	r24, 0xC5	; 197
 106:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	86 ec       	ldi	r24, 0xC6	; 198
 10e:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	87 ec       	ldi	r24, 0xC7	; 199
 116:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 11a:	08 95       	ret
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	a9 f0       	breq	.+42     	; 0x14e <MOTOR_control+0xbc>
 124:	18 f0       	brcs	.+6      	; 0x12c <MOTOR_control+0x9a>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	19 f1       	breq	.+70     	; 0x170 <MOTOR_control+0xde>
 12a:	08 95       	ret
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	84 ec       	ldi	r24, 0xC4	; 196
 130:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	85 ec       	ldi	r24, 0xC5	; 197
 138:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	86 ec       	ldi	r24, 0xC6	; 198
 140:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	87 ec       	ldi	r24, 0xC7	; 199
 148:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 14c:	08 95       	ret
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	84 ec       	ldi	r24, 0xC4	; 196
 152:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	85 ec       	ldi	r24, 0xC5	; 197
 15a:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	86 ec       	ldi	r24, 0xC6	; 198
 162:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	87 ec       	ldi	r24, 0xC7	; 199
 16a:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 16e:	08 95       	ret
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	84 ec       	ldi	r24, 0xC4	; 196
 174:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	85 ec       	ldi	r24, 0xC5	; 197
 17c:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	86 ec       	ldi	r24, 0xC6	; 198
 184:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	87 ec       	ldi	r24, 0xC7	; 199
 18c:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 190:	08 95       	ret
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	84 ec       	ldi	r24, 0xC4	; 196
 196:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	85 ec       	ldi	r24, 0xC5	; 197
 19e:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	86 ec       	ldi	r24, 0xC6	; 198
 1a6:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	87 ec       	ldi	r24, 0xC7	; 199
 1ae:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 1b2:	08 95       	ret

000001b4 <MOTOR_setMotion>:
	
}

void MOTOR_setMotion(enum motion m) {
	currentMotion = m;
 1b4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <currentMotion>
	MOTOR_control();
 1b8:	0e 94 49 00 	call	0x92	; 0x92 <MOTOR_control>
 1bc:	08 95       	ret

000001be <MOTOR_setRotate>:
}

void MOTOR_setRotate(enum rotation r) {
	currentRotation = r;
 1be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	MOTOR_control();
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <MOTOR_control>
 1c6:	08 95       	ret

000001c8 <SPI_receive>:
		
	}
	
}

void SPI_receive(uint8 c){
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <SPI_receive+0x6>
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	if(c == C_FORWARD || c == (C_FORWARD + 32) ){
 1d2:	86 34       	cpi	r24, 0x46	; 70
 1d4:	11 f0       	breq	.+4      	; 0x1da <SPI_receive+0x12>
 1d6:	86 36       	cpi	r24, 0x66	; 102
 1d8:	19 f4       	brne	.+6      	; 0x1e0 <SPI_receive+0x18>
		curMotion = forward;
 1da:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <curMotion>
 1de:	26 c0       	rjmp	.+76     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
	}
	else if(c == C_BACKWARD || c == (C_BACKWARD + 32)){
 1e0:	82 34       	cpi	r24, 0x42	; 66
 1e2:	11 f0       	breq	.+4      	; 0x1e8 <SPI_receive+0x20>
 1e4:	82 36       	cpi	r24, 0x62	; 98
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <SPI_receive+0x28>
		curMotion = backward;
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <curMotion>
 1ee:	1e c0       	rjmp	.+60     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
	}
	else if(c == C_STOP || c == (C_STOP + 32)){
 1f0:	83 35       	cpi	r24, 0x53	; 83
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <SPI_receive+0x30>
 1f4:	83 37       	cpi	r24, 0x73	; 115
 1f6:	21 f4       	brne	.+8      	; 0x200 <__EEPROM_REGION_LENGTH__>
		curMotion = stop;
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <curMotion>
 1fe:	16 c0       	rjmp	.+44     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
	}
	
	else if(c == C_RIGHT || c == (C_RIGHT + 32)){
 200:	82 35       	cpi	r24, 0x52	; 82
 202:	11 f0       	breq	.+4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 204:	82 37       	cpi	r24, 0x72	; 114
 206:	19 f4       	brne	.+6      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
		curRotate = right;
 208:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <curRotate>
 20c:	0f c0       	rjmp	.+30     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
	}else if(c == C_LEFT || c == (C_LEFT + 32)){
 20e:	8c 34       	cpi	r24, 0x4C	; 76
 210:	11 f0       	breq	.+4      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 212:	8c 36       	cpi	r24, 0x6C	; 108
 214:	21 f4       	brne	.+8      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
		curRotate = left;
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <curRotate>
 21c:	07 c0       	rjmp	.+14     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
	}else if(c == C_NO_ROTATE || c == (C_NO_ROTATE + 32)){
 21e:	8e 34       	cpi	r24, 0x4E	; 78
 220:	11 f0       	breq	.+4      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 222:	8e 36       	cpi	r24, 0x6E	; 110
 224:	19 f4       	brne	.+6      	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
		curRotate = noRotate;
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <curRotate>
	}else{
		//nothig
	}
	uint8 arr[] = {c,'\0'};
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	1a 82       	std	Y+2, r1	; 0x02
	UART_sendStr(arr);
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	0e 94 c8 03 	call	0x790	; 0x790 <UART_sendStr>
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <main>:

void SPI_receive(uint8 c);

void main(){
		//leds
		DIO_pinMode(PIN_A0,OUTPUT);
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	80 ea       	ldi	r24, 0xA0	; 160
 246:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
		DIO_pinMode(PIN_A1,OUTPUT);
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	81 ea       	ldi	r24, 0xA1	; 161
 24e:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
		DIO_pinMode(PIN_A2,OUTPUT);
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	82 ea       	ldi	r24, 0xA2	; 162
 256:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
		DIO_pinMode(PIN_A3,OUTPUT);
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	83 ea       	ldi	r24, 0xA3	; 163
 25e:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
	
		DIO_digitalWrite(PIN_A0, HIGH);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	80 ea       	ldi	r24, 0xA0	; 160
 266:	0e 94 22 02 	call	0x444	; 0x444 <DIO_digitalWrite>
		DIO_digitalWrite(PIN_A1, HIGH);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	81 ea       	ldi	r24, 0xA1	; 161
 26e:	0e 94 22 02 	call	0x444	; 0x444 <DIO_digitalWrite>
		
		DIO_digitalWrite(PIN_A2,HIGH);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	82 ea       	ldi	r24, 0xA2	; 162
 276:	0e 94 22 02 	call	0x444	; 0x444 <DIO_digitalWrite>
		DIO_digitalWrite(PIN_A3,HIGH);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	83 ea       	ldi	r24, 0xA3	; 163
 27e:	0e 94 22 02 	call	0x444	; 0x444 <DIO_digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	83 ed       	ldi	r24, 0xD3	; 211
 286:	90 e3       	ldi	r25, 0x30	; 48
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x46>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x50>
 292:	00 00       	nop
	_delay_ms(1000);
	
	TIMER0_init();
 294:	0e 94 07 03 	call	0x60e	; 0x60e <TIMER0_init>
	GI_voidEnable();
 298:	0e 94 ad 02 	call	0x55a	; 0x55a <GI_voidEnable>
	SPI_init();
 29c:	0e 94 b1 02 	call	0x562	; 0x562 <SPI_init>
	UART_init();
 2a0:	0e 94 c0 03 	call	0x780	; 0x780 <UART_init>
	TIMER0_setDutyCycle(30);
 2a4:	8e e1       	ldi	r24, 0x1E	; 30
 2a6:	0e 94 21 03 	call	0x642	; 0x642 <TIMER0_setDutyCycle>
	TIMER1_init();
 2aa:	0e 94 31 03 	call	0x662	; 0x662 <TIMER1_init>
	TIMER2_init();
 2ae:	0e 94 65 03 	call	0x6ca	; 0x6ca <TIMER2_init>
	
	SPI_setCallback(SPI_receive);
 2b2:	84 ee       	ldi	r24, 0xE4	; 228
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <SPI_setCallback>
	
	while(1){
		MOTOR_setMotion(curMotion);
 2ba:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <curMotion>
 2be:	0e 94 da 00 	call	0x1b4	; 0x1b4 <MOTOR_setMotion>
		MOTOR_setRotate(curRotate);
 2c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <curRotate>
 2c6:	0e 94 df 00 	call	0x1be	; 0x1be <MOTOR_setRotate>
		
		
		DIO_digitalWrite(PIN_A0, curMotion == forward);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <curMotion>
 2d0:	81 11       	cpse	r24, r1
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	80 ea       	ldi	r24, 0xA0	; 160
 2d6:	0e 94 22 02 	call	0x444	; 0x444 <DIO_digitalWrite>
		DIO_digitalWrite(PIN_A1, curMotion == backward);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <curMotion>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <main+0xa4>
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	81 ea       	ldi	r24, 0xA1	; 161
 2e8:	0e 94 22 02 	call	0x444	; 0x444 <DIO_digitalWrite>
		
		DIO_digitalWrite(PIN_A2, curRotate == right && curMotion != stop);
 2ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <curRotate>
 2f0:	81 11       	cpse	r24, r1
 2f2:	06 c0       	rjmp	.+12     	; 0x300 <main+0xbe>
 2f4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <curMotion>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	21 f4       	brne	.+8      	; 0x304 <main+0xc2>
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <main+0xc4>
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	01 c0       	rjmp	.+2      	; 0x306 <main+0xc4>
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	82 ea       	ldi	r24, 0xA2	; 162
 308:	0e 94 22 02 	call	0x444	; 0x444 <DIO_digitalWrite>
		DIO_digitalWrite(PIN_A3, curRotate == left && curMotion != stop);
 30c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <curRotate>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	31 f4       	brne	.+12     	; 0x320 <main+0xde>
 314:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <curMotion>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	21 f4       	brne	.+8      	; 0x324 <main+0xe2>
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	03 c0       	rjmp	.+6      	; 0x326 <main+0xe4>
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	01 c0       	rjmp	.+2      	; 0x326 <main+0xe4>
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	83 ea       	ldi	r24, 0xA3	; 163
 328:	0e 94 22 02 	call	0x444	; 0x444 <DIO_digitalWrite>
		
		
	}
 32c:	c6 cf       	rjmp	.-116    	; 0x2ba <main+0x78>

0000032e <DIO_pinMode>:

#include "DIO_interface.h"

void DIO_pinMode(char PIN_NO,char DIR){
	char pin,port;
	pin =  PIN_NO & 0x0f;
 32e:	98 2f       	mov	r25, r24
 330:	9f 70       	andi	r25, 0x0F	; 15
	port = PIN_NO & 0xf0;
 332:	80 7f       	andi	r24, 0xF0	; 240
	
	switch(DIR){
 334:	66 23       	and	r22, r22
 336:	09 f4       	brne	.+2      	; 0x33a <DIO_pinMode+0xc>
 338:	42 c0       	rjmp	.+132    	; 0x3be <DIO_pinMode+0x90>
 33a:	61 30       	cpi	r22, 0x01	; 1
 33c:	09 f0       	breq	.+2      	; 0x340 <DIO_pinMode+0x12>
 33e:	81 c0       	rjmp	.+258    	; 0x442 <__DATA_REGION_LENGTH__+0x42>
		case OUTPUT:
		switch (port){
 340:	80 3b       	cpi	r24, 0xB0	; 176
 342:	b1 f0       	breq	.+44     	; 0x370 <DIO_pinMode+0x42>
 344:	18 f4       	brcc	.+6      	; 0x34c <DIO_pinMode+0x1e>
 346:	80 3a       	cpi	r24, 0xA0	; 160
 348:	31 f0       	breq	.+12     	; 0x356 <DIO_pinMode+0x28>
 34a:	08 95       	ret
 34c:	80 3c       	cpi	r24, 0xC0	; 192
 34e:	e9 f0       	breq	.+58     	; 0x38a <DIO_pinMode+0x5c>
 350:	80 3d       	cpi	r24, 0xD0	; 208
 352:	41 f1       	breq	.+80     	; 0x3a4 <DIO_pinMode+0x76>
 354:	08 95       	ret
			case A:SET_BIT(DDRA,pin); break;
 356:	4a b3       	in	r20, 0x1a	; 26
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	b9 01       	movw	r22, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_pinMode+0x36>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	9a 95       	dec	r25
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_pinMode+0x32>
 368:	cb 01       	movw	r24, r22
 36a:	84 2b       	or	r24, r20
 36c:	8a bb       	out	0x1a, r24	; 26
 36e:	08 95       	ret
			case B:SET_BIT(DDRB,pin); break;
 370:	47 b3       	in	r20, 0x17	; 23
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_pinMode+0x50>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	9a 95       	dec	r25
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_pinMode+0x4c>
 382:	cb 01       	movw	r24, r22
 384:	84 2b       	or	r24, r20
 386:	87 bb       	out	0x17, r24	; 23
 388:	08 95       	ret
			case C:SET_BIT(DDRC,pin); break;
 38a:	44 b3       	in	r20, 0x14	; 20
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	b9 01       	movw	r22, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_pinMode+0x6a>
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	9a 95       	dec	r25
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_pinMode+0x66>
 39c:	cb 01       	movw	r24, r22
 39e:	84 2b       	or	r24, r20
 3a0:	84 bb       	out	0x14, r24	; 20
 3a2:	08 95       	ret
			case D:SET_BIT(DDRD,pin); break;
 3a4:	41 b3       	in	r20, 0x11	; 17
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	b9 01       	movw	r22, r18
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_pinMode+0x84>
 3ae:	66 0f       	add	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	9a 95       	dec	r25
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_pinMode+0x80>
 3b6:	cb 01       	movw	r24, r22
 3b8:	84 2b       	or	r24, r20
 3ba:	81 bb       	out	0x11, r24	; 17
 3bc:	08 95       	ret
		}
		break;
		case INPUT:
		switch (port){
 3be:	80 3b       	cpi	r24, 0xB0	; 176
 3c0:	b9 f0       	breq	.+46     	; 0x3f0 <DIO_pinMode+0xc2>
 3c2:	18 f4       	brcc	.+6      	; 0x3ca <DIO_pinMode+0x9c>
 3c4:	80 3a       	cpi	r24, 0xA0	; 160
 3c6:	31 f0       	breq	.+12     	; 0x3d4 <DIO_pinMode+0xa6>
 3c8:	08 95       	ret
 3ca:	80 3c       	cpi	r24, 0xC0	; 192
 3cc:	f9 f0       	breq	.+62     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 3ce:	80 3d       	cpi	r24, 0xD0	; 208
 3d0:	59 f1       	breq	.+86     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 3d2:	08 95       	ret
			case A:CLR_BIT(DDRA,pin); break;
 3d4:	4a b3       	in	r20, 0x1a	; 26
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	b9 01       	movw	r22, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_pinMode+0xb4>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	9a 95       	dec	r25
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_pinMode+0xb0>
 3e6:	cb 01       	movw	r24, r22
 3e8:	80 95       	com	r24
 3ea:	84 23       	and	r24, r20
 3ec:	8a bb       	out	0x1a, r24	; 26
 3ee:	08 95       	ret
			case B:CLR_BIT(DDRB,pin); break;
 3f0:	47 b3       	in	r20, 0x17	; 23
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	b9 01       	movw	r22, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_pinMode+0xd0>
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	9a 95       	dec	r25
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_pinMode+0xcc>
 402:	cb 01       	movw	r24, r22
 404:	80 95       	com	r24
 406:	84 23       	and	r24, r20
 408:	87 bb       	out	0x17, r24	; 23
 40a:	08 95       	ret
			case C:CLR_BIT(DDRC,pin); break;
 40c:	44 b3       	in	r20, 0x14	; 20
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	b9 01       	movw	r22, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	9a 95       	dec	r25
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 41e:	cb 01       	movw	r24, r22
 420:	80 95       	com	r24
 422:	84 23       	and	r24, r20
 424:	84 bb       	out	0x14, r24	; 20
 426:	08 95       	ret
			case D:CLR_BIT(DDRD,pin); break;
 428:	41 b3       	in	r20, 0x11	; 17
 42a:	21 e0       	ldi	r18, 0x01	; 1
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	b9 01       	movw	r22, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	9a 95       	dec	r25
 438:	e2 f7       	brpl	.-8      	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 43a:	cb 01       	movw	r24, r22
 43c:	80 95       	com	r24
 43e:	84 23       	and	r24, r20
 440:	81 bb       	out	0x11, r24	; 17
 442:	08 95       	ret

00000444 <DIO_digitalWrite>:
	}
}

void DIO_digitalWrite(char PIN_NO,char STATE){
	char pin,port;
	pin =  PIN_NO & 0x0f;
 444:	98 2f       	mov	r25, r24
 446:	9f 70       	andi	r25, 0x0F	; 15
	port = PIN_NO & 0xf0;
 448:	80 7f       	andi	r24, 0xF0	; 240
	
	switch(STATE){
 44a:	66 23       	and	r22, r22
 44c:	09 f4       	brne	.+2      	; 0x450 <DIO_digitalWrite+0xc>
 44e:	42 c0       	rjmp	.+132    	; 0x4d4 <__stack+0x75>
 450:	61 30       	cpi	r22, 0x01	; 1
 452:	09 f0       	breq	.+2      	; 0x456 <DIO_digitalWrite+0x12>
 454:	81 c0       	rjmp	.+258    	; 0x558 <__stack+0xf9>
		case HIGH:
		switch (port){
 456:	80 3b       	cpi	r24, 0xB0	; 176
 458:	b1 f0       	breq	.+44     	; 0x486 <__stack+0x27>
 45a:	18 f4       	brcc	.+6      	; 0x462 <__stack+0x3>
 45c:	80 3a       	cpi	r24, 0xA0	; 160
 45e:	31 f0       	breq	.+12     	; 0x46c <__stack+0xd>
 460:	08 95       	ret
 462:	80 3c       	cpi	r24, 0xC0	; 192
 464:	e9 f0       	breq	.+58     	; 0x4a0 <__stack+0x41>
 466:	80 3d       	cpi	r24, 0xD0	; 208
 468:	41 f1       	breq	.+80     	; 0x4ba <__stack+0x5b>
 46a:	08 95       	ret
			case A:SET_BIT(PORTA,pin); break;
 46c:	4b b3       	in	r20, 0x1b	; 27
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	b9 01       	movw	r22, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <__stack+0x1b>
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	9a 95       	dec	r25
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__stack+0x17>
 47e:	cb 01       	movw	r24, r22
 480:	84 2b       	or	r24, r20
 482:	8b bb       	out	0x1b, r24	; 27
 484:	08 95       	ret
			case B:SET_BIT(PORTB,pin); break;
 486:	48 b3       	in	r20, 0x18	; 24
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__stack+0x35>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	9a 95       	dec	r25
 496:	e2 f7       	brpl	.-8      	; 0x490 <__stack+0x31>
 498:	cb 01       	movw	r24, r22
 49a:	84 2b       	or	r24, r20
 49c:	88 bb       	out	0x18, r24	; 24
 49e:	08 95       	ret
			case C:SET_BIT(PORTC,pin); break;
 4a0:	45 b3       	in	r20, 0x15	; 21
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	b9 01       	movw	r22, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__stack+0x4f>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	9a 95       	dec	r25
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__stack+0x4b>
 4b2:	cb 01       	movw	r24, r22
 4b4:	84 2b       	or	r24, r20
 4b6:	85 bb       	out	0x15, r24	; 21
 4b8:	08 95       	ret
			case D:SET_BIT(PORTD,pin); break;
 4ba:	42 b3       	in	r20, 0x12	; 18
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	b9 01       	movw	r22, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__stack+0x69>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	9a 95       	dec	r25
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__stack+0x65>
 4cc:	cb 01       	movw	r24, r22
 4ce:	84 2b       	or	r24, r20
 4d0:	82 bb       	out	0x12, r24	; 18
 4d2:	08 95       	ret
		}
		break;
		case LOW:
		switch (port){
 4d4:	80 3b       	cpi	r24, 0xB0	; 176
 4d6:	b9 f0       	breq	.+46     	; 0x506 <__stack+0xa7>
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <__stack+0x81>
 4da:	80 3a       	cpi	r24, 0xA0	; 160
 4dc:	31 f0       	breq	.+12     	; 0x4ea <__stack+0x8b>
 4de:	08 95       	ret
 4e0:	80 3c       	cpi	r24, 0xC0	; 192
 4e2:	f9 f0       	breq	.+62     	; 0x522 <__stack+0xc3>
 4e4:	80 3d       	cpi	r24, 0xD0	; 208
 4e6:	59 f1       	breq	.+86     	; 0x53e <__stack+0xdf>
 4e8:	08 95       	ret
			case A:CLR_BIT(PORTA,pin); break;
 4ea:	4b b3       	in	r20, 0x1b	; 27
 4ec:	21 e0       	ldi	r18, 0x01	; 1
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	b9 01       	movw	r22, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__stack+0x99>
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	9a 95       	dec	r25
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <__stack+0x95>
 4fc:	cb 01       	movw	r24, r22
 4fe:	80 95       	com	r24
 500:	84 23       	and	r24, r20
 502:	8b bb       	out	0x1b, r24	; 27
 504:	08 95       	ret
			case B:CLR_BIT(PORTB,pin); break;
 506:	48 b3       	in	r20, 0x18	; 24
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	b9 01       	movw	r22, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <__stack+0xb5>
 510:	66 0f       	add	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	9a 95       	dec	r25
 516:	e2 f7       	brpl	.-8      	; 0x510 <__stack+0xb1>
 518:	cb 01       	movw	r24, r22
 51a:	80 95       	com	r24
 51c:	84 23       	and	r24, r20
 51e:	88 bb       	out	0x18, r24	; 24
 520:	08 95       	ret
			case C:CLR_BIT(PORTC,pin); break;
 522:	45 b3       	in	r20, 0x15	; 21
 524:	21 e0       	ldi	r18, 0x01	; 1
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	b9 01       	movw	r22, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__stack+0xd1>
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	9a 95       	dec	r25
 532:	e2 f7       	brpl	.-8      	; 0x52c <__stack+0xcd>
 534:	cb 01       	movw	r24, r22
 536:	80 95       	com	r24
 538:	84 23       	and	r24, r20
 53a:	85 bb       	out	0x15, r24	; 21
 53c:	08 95       	ret
			case D:CLR_BIT(PORTD,pin); break;
 53e:	42 b3       	in	r20, 0x12	; 18
 540:	21 e0       	ldi	r18, 0x01	; 1
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	b9 01       	movw	r22, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <__stack+0xed>
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	9a 95       	dec	r25
 54e:	e2 f7       	brpl	.-8      	; 0x548 <__stack+0xe9>
 550:	cb 01       	movw	r24, r22
 552:	80 95       	com	r24
 554:	84 23       	and	r24, r20
 556:	82 bb       	out	0x12, r24	; 18
 558:	08 95       	ret

0000055a <GI_voidEnable>:



void GI_voidEnable(void)
{
	SET_BIT(SREG,SPEG_I);
 55a:	8f b7       	in	r24, 0x3f	; 63
 55c:	80 68       	ori	r24, 0x80	; 128
 55e:	8f bf       	out	0x3f, r24	; 63
 560:	08 95       	ret

00000562 <SPI_init>:
		i++;
	}
	
	if(i==1000) return 0;
	else return ((uint8)SPDR_REG);
}
 562:	8d b1       	in	r24, 0x0d	; 13
 564:	80 64       	ori	r24, 0x40	; 64
 566:	8d b9       	out	0x0d, r24	; 13
 568:	8d b1       	in	r24, 0x0d	; 13
 56a:	8f 7d       	andi	r24, 0xDF	; 223
 56c:	8d b9       	out	0x0d, r24	; 13
 56e:	8d b1       	in	r24, 0x0d	; 13
 570:	87 7f       	andi	r24, 0xF7	; 247
 572:	8d b9       	out	0x0d, r24	; 13
 574:	8d b1       	in	r24, 0x0d	; 13
 576:	8b 7f       	andi	r24, 0xFB	; 251
 578:	8d b9       	out	0x0d, r24	; 13
 57a:	8d b1       	in	r24, 0x0d	; 13
 57c:	8f 7e       	andi	r24, 0xEF	; 239
 57e:	8d b9       	out	0x0d, r24	; 13
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	85 eb       	ldi	r24, 0xB5	; 181
 584:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	86 eb       	ldi	r24, 0xB6	; 182
 58c:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	84 eb       	ldi	r24, 0xB4	; 180
 594:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	87 eb       	ldi	r24, 0xB7	; 183
 59c:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
 5a0:	8d b1       	in	r24, 0x0d	; 13
 5a2:	80 68       	ori	r24, 0x80	; 128
 5a4:	8d b9       	out	0x0d, r24	; 13
 5a6:	08 95       	ret

000005a8 <SPI_setCallback>:

#if SPI_ENABLE_INTERRUPT==1||SPI_MODE==SPI_SLAVE_MODE
	static volatile func_uint8_ptr callback = NULL;
	
	void SPI_setCallback(func_uint8_ptr fptr){
		callback = fptr;
 5a8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 5ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 5b0:	08 95       	ret

000005b2 <__vector_10>:
	}
	
	ISR(SPI_STC_vect) {
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	2f 93       	push	r18
 5be:	3f 93       	push	r19
 5c0:	4f 93       	push	r20
 5c2:	5f 93       	push	r21
 5c4:	6f 93       	push	r22
 5c6:	7f 93       	push	r23
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
 5cc:	af 93       	push	r26
 5ce:	bf 93       	push	r27
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
		if(callback != NULL){
 5d4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 5d8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 5dc:	89 2b       	or	r24, r25
 5de:	31 f0       	breq	.+12     	; 0x5ec <__vector_10+0x3a>
			callback((uint8)SPDR_REG);
 5e0:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 5e4:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 5e8:	8f b1       	in	r24, 0x0f	; 15
 5ea:	09 95       	icall
		}
	}
 5ec:	ff 91       	pop	r31
 5ee:	ef 91       	pop	r30
 5f0:	bf 91       	pop	r27
 5f2:	af 91       	pop	r26
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	7f 91       	pop	r23
 5fa:	6f 91       	pop	r22
 5fc:	5f 91       	pop	r21
 5fe:	4f 91       	pop	r20
 600:	3f 91       	pop	r19
 602:	2f 91       	pop	r18
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <TIMER0_init>:
 * Created: 7/10/2024 4:57:14 PM
 *  Author: Mahmoud Osman
 */ 
#include "Timer0_PWM.h"
void TIMER0_init(void){
	DIO_pinMode(PIN_B3,OUTPUT);
 60e:	61 e0       	ldi	r22, 0x01	; 1
 610:	83 eb       	ldi	r24, 0xB3	; 179
 612:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_pinMode>
	//DIO_pinMode(PIN_B4,OUTPUT);
	//DIO_digitalWrite(PIN_B4,HIGH);
	
	//SET TO FAST PWM
	SET_BIT(TCCR0,WGM00);
 616:	83 b7       	in	r24, 0x33	; 51
 618:	80 64       	ori	r24, 0x40	; 64
 61a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
 61c:	83 b7       	in	r24, 0x33	; 51
 61e:	88 60       	ori	r24, 0x08	; 8
 620:	83 bf       	out	0x33, r24	; 51
	
	//select non inverting mode
	SET_BIT(TCCR0,COM01);
 622:	83 b7       	in	r24, 0x33	; 51
 624:	80 62       	ori	r24, 0x20	; 32
 626:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,COM00);
 628:	83 b7       	in	r24, 0x33	; 51
 62a:	8f 7e       	andi	r24, 0xEF	; 239
 62c:	83 bf       	out	0x33, r24	; 51
	
	//set prescaller to 1024
	SET_BIT(TCCR0,CS00);
 62e:	83 b7       	in	r24, 0x33	; 51
 630:	81 60       	ori	r24, 0x01	; 1
 632:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
 634:	83 b7       	in	r24, 0x33	; 51
 636:	8d 7f       	andi	r24, 0xFD	; 253
 638:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 63a:	83 b7       	in	r24, 0x33	; 51
 63c:	84 60       	ori	r24, 0x04	; 4
 63e:	83 bf       	out	0x33, r24	; 51
 640:	08 95       	ret

00000642 <TIMER0_setDutyCycle>:
	
}


void TIMER0_setDutyCycle(uint8 speed){
	uint8 OCR_Val= speed*2.55;
 642:	68 2f       	mov	r22, r24
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 33 04 	call	0x866	; 0x866 <__floatsisf>
 64e:	23 e3       	ldi	r18, 0x33	; 51
 650:	33 e3       	ldi	r19, 0x33	; 51
 652:	43 e2       	ldi	r20, 0x23	; 35
 654:	50 e4       	ldi	r21, 0x40	; 64
 656:	0e 94 97 04 	call	0x92e	; 0x92e <__mulsf3>
 65a:	0e 94 02 04 	call	0x804	; 0x804 <__fixunssfsi>
	OCR0=OCR_Val;
 65e:	6c bf       	out	0x3c, r22	; 60
 660:	08 95       	ret

00000662 <TIMER1_init>:
    // Enable Timer1 compare interrupt
    TIMSK |= (1 << OCIE1A);
}

void TIMER1_setCallBack(void (*ptr2fun)()) {
    timer1_callback = ptr2fun;
 662:	1f bc       	out	0x2f, r1	; 47
 664:	8c e0       	ldi	r24, 0x0C	; 12
 666:	8e bd       	out	0x2e, r24	; 46
 668:	85 e3       	ldi	r24, 0x35	; 53
 66a:	9c e0       	ldi	r25, 0x0C	; 12
 66c:	9b bd       	out	0x2b, r25	; 43
 66e:	8a bd       	out	0x2a, r24	; 42
 670:	89 b7       	in	r24, 0x39	; 57
 672:	80 61       	ori	r24, 0x10	; 16
 674:	89 bf       	out	0x39, r24	; 57
 676:	08 95       	ret

00000678 <__vector_6>:
}

// Timer1 ISR (every 50 ms)
ISR(TIMER1_COMPA_vect) {
 678:	1f 92       	push	r1
 67a:	0f 92       	push	r0
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	0f 92       	push	r0
 680:	11 24       	eor	r1, r1
 682:	2f 93       	push	r18
 684:	3f 93       	push	r19
 686:	4f 93       	push	r20
 688:	5f 93       	push	r21
 68a:	6f 93       	push	r22
 68c:	7f 93       	push	r23
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
 692:	af 93       	push	r26
 694:	bf 93       	push	r27
 696:	ef 93       	push	r30
 698:	ff 93       	push	r31
    if (timer1_callback != NULL) {
 69a:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <timer1_callback>
 69e:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <timer1_callback+0x1>
 6a2:	30 97       	sbiw	r30, 0x00	; 0
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <__vector_6+0x30>
        timer1_callback();
 6a6:	09 95       	icall
    }
 6a8:	ff 91       	pop	r31
 6aa:	ef 91       	pop	r30
 6ac:	bf 91       	pop	r27
 6ae:	af 91       	pop	r26
 6b0:	9f 91       	pop	r25
 6b2:	8f 91       	pop	r24
 6b4:	7f 91       	pop	r23
 6b6:	6f 91       	pop	r22
 6b8:	5f 91       	pop	r21
 6ba:	4f 91       	pop	r20
 6bc:	3f 91       	pop	r19
 6be:	2f 91       	pop	r18
 6c0:	0f 90       	pop	r0
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	0f 90       	pop	r0
 6c6:	1f 90       	pop	r1
 6c8:	18 95       	reti

000006ca <TIMER2_init>:
}

#if TIMER2_MODE_SELECT == TIMER2_MODE_NORMAL || TIMER2_MODE_SELECT == TIMER2_MODE_CTC
static ptr2fun callback = NULL;
void TIMER2_setCallback(ptr2fun fptr){
	callback = fptr;
 6ca:	85 b5       	in	r24, 0x25	; 37
 6cc:	80 64       	ori	r24, 0x40	; 64
 6ce:	85 bd       	out	0x25, r24	; 37
 6d0:	85 b5       	in	r24, 0x25	; 37
 6d2:	87 7f       	andi	r24, 0xF7	; 247
 6d4:	85 bd       	out	0x25, r24	; 37
 6d6:	85 b5       	in	r24, 0x25	; 37
 6d8:	8f 7c       	andi	r24, 0xCF	; 207
 6da:	80 61       	ori	r24, 0x10	; 16
 6dc:	85 bd       	out	0x25, r24	; 37
 6de:	14 bc       	out	0x24, r1	; 36
 6e0:	8a e1       	ldi	r24, 0x1A	; 26
 6e2:	83 bd       	out	0x23, r24	; 35
 6e4:	85 b5       	in	r24, 0x25	; 37
 6e6:	88 7f       	andi	r24, 0xF8	; 248
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	85 bd       	out	0x25, r24	; 37
 6ec:	08 95       	ret

000006ee <__vector_3>:

//Timer/Counter2 Compare ISR
#if TIMER2_MODE_SELECT == TIMER2_MODE_CTC
	
	
	ISR(TIMER2_COMP_vect){
 6ee:	1f 92       	push	r1
 6f0:	0f 92       	push	r0
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	0f 92       	push	r0
 6f6:	11 24       	eor	r1, r1
 6f8:	2f 93       	push	r18
 6fa:	3f 93       	push	r19
 6fc:	4f 93       	push	r20
 6fe:	5f 93       	push	r21
 700:	6f 93       	push	r22
 702:	7f 93       	push	r23
 704:	8f 93       	push	r24
 706:	9f 93       	push	r25
 708:	af 93       	push	r26
 70a:	bf 93       	push	r27
 70c:	ef 93       	push	r30
 70e:	ff 93       	push	r31
		static uint32 counter = 0;
		counter++;
 710:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <counter.1639>
 714:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <counter.1639+0x1>
 718:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <counter.1639+0x2>
 71c:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <counter.1639+0x3>
 720:	01 96       	adiw	r24, 0x01	; 1
 722:	a1 1d       	adc	r26, r1
 724:	b1 1d       	adc	r27, r1
 726:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <counter.1639>
 72a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <counter.1639+0x1>
 72e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <counter.1639+0x2>
 732:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <counter.1639+0x3>

		if(counter == TIMER2_MAX_COUNT){
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	a1 05       	cpc	r26, r1
 73a:	b1 05       	cpc	r27, r1
 73c:	81 f4       	brne	.+32     	; 0x75e <__vector_3+0x70>
			counter = 0;
 73e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <counter.1639>
 742:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <counter.1639+0x1>
 746:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <counter.1639+0x2>
 74a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <counter.1639+0x3>
			TCNT2_REG = TIMER2_PRELOAD_VAL;
 74e:	14 bc       	out	0x24, r1	; 36
			
			if(callback != NULL){
 750:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <callback>
 754:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <callback+0x1>
 758:	30 97       	sbiw	r30, 0x00	; 0
 75a:	09 f0       	breq	.+2      	; 0x75e <__vector_3+0x70>
				callback();
 75c:	09 95       	icall
			}
			
		}
	}
 75e:	ff 91       	pop	r31
 760:	ef 91       	pop	r30
 762:	bf 91       	pop	r27
 764:	af 91       	pop	r26
 766:	9f 91       	pop	r25
 768:	8f 91       	pop	r24
 76a:	7f 91       	pop	r23
 76c:	6f 91       	pop	r22
 76e:	5f 91       	pop	r21
 770:	4f 91       	pop	r20
 772:	3f 91       	pop	r19
 774:	2f 91       	pop	r18
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

00000780 <UART_init>:
}

void UART_onReceive(void (*ptr2fun)(uint8 c)) {
	UART_receiveCallback = ptr2fun;
	// Enable the UART Receive Complete interrupt
	UCSRB |= (1 << RXCIE);
 780:	10 bc       	out	0x20, r1	; 32
 782:	87 e6       	ldi	r24, 0x67	; 103
 784:	89 b9       	out	0x09, r24	; 9
 786:	88 e1       	ldi	r24, 0x18	; 24
 788:	8a b9       	out	0x0a, r24	; 10
 78a:	86 e0       	ldi	r24, 0x06	; 6
 78c:	80 bd       	out	0x20, r24	; 32
 78e:	08 95       	ret

00000790 <UART_sendStr>:
 790:	ac 01       	movw	r20, r24
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	05 c0       	rjmp	.+10     	; 0x7a2 <UART_sendStr+0x12>
 798:	5d 9b       	sbis	0x0b, 5	; 11
 79a:	fe cf       	rjmp	.-4      	; 0x798 <UART_sendStr+0x8>
 79c:	9c b9       	out	0x0c, r25	; 12
 79e:	2f 5f       	subi	r18, 0xFF	; 255
 7a0:	3f 4f       	sbci	r19, 0xFF	; 255
 7a2:	fa 01       	movw	r30, r20
 7a4:	e2 0f       	add	r30, r18
 7a6:	f3 1f       	adc	r31, r19
 7a8:	90 81       	ld	r25, Z
 7aa:	91 11       	cpse	r25, r1
 7ac:	f5 cf       	rjmp	.-22     	; 0x798 <UART_sendStr+0x8>
 7ae:	08 95       	ret

000007b0 <__vector_11>:
}

ISR(USART_RXC_vect) {
 7b0:	1f 92       	push	r1
 7b2:	0f 92       	push	r0
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	0f 92       	push	r0
 7b8:	11 24       	eor	r1, r1
 7ba:	2f 93       	push	r18
 7bc:	3f 93       	push	r19
 7be:	4f 93       	push	r20
 7c0:	5f 93       	push	r21
 7c2:	6f 93       	push	r22
 7c4:	7f 93       	push	r23
 7c6:	8f 93       	push	r24
 7c8:	9f 93       	push	r25
 7ca:	af 93       	push	r26
 7cc:	bf 93       	push	r27
 7ce:	ef 93       	push	r30
 7d0:	ff 93       	push	r31
	if (UART_receiveCallback) {
 7d2:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <UART_receiveCallback>
 7d6:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <UART_receiveCallback+0x1>
 7da:	30 97       	sbiw	r30, 0x00	; 0
 7dc:	11 f0       	breq	.+4      	; 0x7e2 <__vector_11+0x32>
		uint8 receivedChar = UDR;  // Read the received data
 7de:	8c b1       	in	r24, 0x0c	; 12
		UART_receiveCallback(receivedChar);  // Call the user-defined function
 7e0:	09 95       	icall
	}
}
 7e2:	ff 91       	pop	r31
 7e4:	ef 91       	pop	r30
 7e6:	bf 91       	pop	r27
 7e8:	af 91       	pop	r26
 7ea:	9f 91       	pop	r25
 7ec:	8f 91       	pop	r24
 7ee:	7f 91       	pop	r23
 7f0:	6f 91       	pop	r22
 7f2:	5f 91       	pop	r21
 7f4:	4f 91       	pop	r20
 7f6:	3f 91       	pop	r19
 7f8:	2f 91       	pop	r18
 7fa:	0f 90       	pop	r0
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	0f 90       	pop	r0
 800:	1f 90       	pop	r1
 802:	18 95       	reti

00000804 <__fixunssfsi>:
 804:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fp_splitA>
 808:	88 f0       	brcs	.+34     	; 0x82c <__fixunssfsi+0x28>
 80a:	9f 57       	subi	r25, 0x7F	; 127
 80c:	98 f0       	brcs	.+38     	; 0x834 <__fixunssfsi+0x30>
 80e:	b9 2f       	mov	r27, r25
 810:	99 27       	eor	r25, r25
 812:	b7 51       	subi	r27, 0x17	; 23
 814:	b0 f0       	brcs	.+44     	; 0x842 <__fixunssfsi+0x3e>
 816:	e1 f0       	breq	.+56     	; 0x850 <__fixunssfsi+0x4c>
 818:	66 0f       	add	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	88 1f       	adc	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	1a f0       	brmi	.+6      	; 0x828 <__fixunssfsi+0x24>
 822:	ba 95       	dec	r27
 824:	c9 f7       	brne	.-14     	; 0x818 <__fixunssfsi+0x14>
 826:	14 c0       	rjmp	.+40     	; 0x850 <__fixunssfsi+0x4c>
 828:	b1 30       	cpi	r27, 0x01	; 1
 82a:	91 f0       	breq	.+36     	; 0x850 <__fixunssfsi+0x4c>
 82c:	0e 94 90 04 	call	0x920	; 0x920 <__fp_zero>
 830:	b1 e0       	ldi	r27, 0x01	; 1
 832:	08 95       	ret
 834:	0c 94 90 04 	jmp	0x920	; 0x920 <__fp_zero>
 838:	67 2f       	mov	r22, r23
 83a:	78 2f       	mov	r23, r24
 83c:	88 27       	eor	r24, r24
 83e:	b8 5f       	subi	r27, 0xF8	; 248
 840:	39 f0       	breq	.+14     	; 0x850 <__fixunssfsi+0x4c>
 842:	b9 3f       	cpi	r27, 0xF9	; 249
 844:	cc f3       	brlt	.-14     	; 0x838 <__fixunssfsi+0x34>
 846:	86 95       	lsr	r24
 848:	77 95       	ror	r23
 84a:	67 95       	ror	r22
 84c:	b3 95       	inc	r27
 84e:	d9 f7       	brne	.-10     	; 0x846 <__fixunssfsi+0x42>
 850:	3e f4       	brtc	.+14     	; 0x860 <__fixunssfsi+0x5c>
 852:	90 95       	com	r25
 854:	80 95       	com	r24
 856:	70 95       	com	r23
 858:	61 95       	neg	r22
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	08 95       	ret

00000862 <__floatunsisf>:
 862:	e8 94       	clt
 864:	09 c0       	rjmp	.+18     	; 0x878 <__floatsisf+0x12>

00000866 <__floatsisf>:
 866:	97 fb       	bst	r25, 7
 868:	3e f4       	brtc	.+14     	; 0x878 <__floatsisf+0x12>
 86a:	90 95       	com	r25
 86c:	80 95       	com	r24
 86e:	70 95       	com	r23
 870:	61 95       	neg	r22
 872:	7f 4f       	sbci	r23, 0xFF	; 255
 874:	8f 4f       	sbci	r24, 0xFF	; 255
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	99 23       	and	r25, r25
 87a:	a9 f0       	breq	.+42     	; 0x8a6 <__floatsisf+0x40>
 87c:	f9 2f       	mov	r31, r25
 87e:	96 e9       	ldi	r25, 0x96	; 150
 880:	bb 27       	eor	r27, r27
 882:	93 95       	inc	r25
 884:	f6 95       	lsr	r31
 886:	87 95       	ror	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	b7 95       	ror	r27
 88e:	f1 11       	cpse	r31, r1
 890:	f8 cf       	rjmp	.-16     	; 0x882 <__floatsisf+0x1c>
 892:	fa f4       	brpl	.+62     	; 0x8d2 <__floatsisf+0x6c>
 894:	bb 0f       	add	r27, r27
 896:	11 f4       	brne	.+4      	; 0x89c <__floatsisf+0x36>
 898:	60 ff       	sbrs	r22, 0
 89a:	1b c0       	rjmp	.+54     	; 0x8d2 <__floatsisf+0x6c>
 89c:	6f 5f       	subi	r22, 0xFF	; 255
 89e:	7f 4f       	sbci	r23, 0xFF	; 255
 8a0:	8f 4f       	sbci	r24, 0xFF	; 255
 8a2:	9f 4f       	sbci	r25, 0xFF	; 255
 8a4:	16 c0       	rjmp	.+44     	; 0x8d2 <__floatsisf+0x6c>
 8a6:	88 23       	and	r24, r24
 8a8:	11 f0       	breq	.+4      	; 0x8ae <__floatsisf+0x48>
 8aa:	96 e9       	ldi	r25, 0x96	; 150
 8ac:	11 c0       	rjmp	.+34     	; 0x8d0 <__floatsisf+0x6a>
 8ae:	77 23       	and	r23, r23
 8b0:	21 f0       	breq	.+8      	; 0x8ba <__floatsisf+0x54>
 8b2:	9e e8       	ldi	r25, 0x8E	; 142
 8b4:	87 2f       	mov	r24, r23
 8b6:	76 2f       	mov	r23, r22
 8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <__floatsisf+0x5e>
 8ba:	66 23       	and	r22, r22
 8bc:	71 f0       	breq	.+28     	; 0x8da <__floatsisf+0x74>
 8be:	96 e8       	ldi	r25, 0x86	; 134
 8c0:	86 2f       	mov	r24, r22
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	2a f0       	brmi	.+10     	; 0x8d2 <__floatsisf+0x6c>
 8c8:	9a 95       	dec	r25
 8ca:	66 0f       	add	r22, r22
 8cc:	77 1f       	adc	r23, r23
 8ce:	88 1f       	adc	r24, r24
 8d0:	da f7       	brpl	.-10     	; 0x8c8 <__floatsisf+0x62>
 8d2:	88 0f       	add	r24, r24
 8d4:	96 95       	lsr	r25
 8d6:	87 95       	ror	r24
 8d8:	97 f9       	bld	r25, 7
 8da:	08 95       	ret

000008dc <__fp_split3>:
 8dc:	57 fd       	sbrc	r21, 7
 8de:	90 58       	subi	r25, 0x80	; 128
 8e0:	44 0f       	add	r20, r20
 8e2:	55 1f       	adc	r21, r21
 8e4:	59 f0       	breq	.+22     	; 0x8fc <__fp_splitA+0x10>
 8e6:	5f 3f       	cpi	r21, 0xFF	; 255
 8e8:	71 f0       	breq	.+28     	; 0x906 <__fp_splitA+0x1a>
 8ea:	47 95       	ror	r20

000008ec <__fp_splitA>:
 8ec:	88 0f       	add	r24, r24
 8ee:	97 fb       	bst	r25, 7
 8f0:	99 1f       	adc	r25, r25
 8f2:	61 f0       	breq	.+24     	; 0x90c <__fp_splitA+0x20>
 8f4:	9f 3f       	cpi	r25, 0xFF	; 255
 8f6:	79 f0       	breq	.+30     	; 0x916 <__fp_splitA+0x2a>
 8f8:	87 95       	ror	r24
 8fa:	08 95       	ret
 8fc:	12 16       	cp	r1, r18
 8fe:	13 06       	cpc	r1, r19
 900:	14 06       	cpc	r1, r20
 902:	55 1f       	adc	r21, r21
 904:	f2 cf       	rjmp	.-28     	; 0x8ea <__fp_split3+0xe>
 906:	46 95       	lsr	r20
 908:	f1 df       	rcall	.-30     	; 0x8ec <__fp_splitA>
 90a:	08 c0       	rjmp	.+16     	; 0x91c <__fp_splitA+0x30>
 90c:	16 16       	cp	r1, r22
 90e:	17 06       	cpc	r1, r23
 910:	18 06       	cpc	r1, r24
 912:	99 1f       	adc	r25, r25
 914:	f1 cf       	rjmp	.-30     	; 0x8f8 <__fp_splitA+0xc>
 916:	86 95       	lsr	r24
 918:	71 05       	cpc	r23, r1
 91a:	61 05       	cpc	r22, r1
 91c:	08 94       	sec
 91e:	08 95       	ret

00000920 <__fp_zero>:
 920:	e8 94       	clt

00000922 <__fp_szero>:
 922:	bb 27       	eor	r27, r27
 924:	66 27       	eor	r22, r22
 926:	77 27       	eor	r23, r23
 928:	cb 01       	movw	r24, r22
 92a:	97 f9       	bld	r25, 7
 92c:	08 95       	ret

0000092e <__mulsf3>:
 92e:	0e 94 aa 04 	call	0x954	; 0x954 <__mulsf3x>
 932:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__fp_round>
 936:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscA>
 93a:	38 f0       	brcs	.+14     	; 0x94a <__mulsf3+0x1c>
 93c:	0e 94 14 05 	call	0xa28	; 0xa28 <__fp_pscB>
 940:	20 f0       	brcs	.+8      	; 0x94a <__mulsf3+0x1c>
 942:	95 23       	and	r25, r21
 944:	11 f0       	breq	.+4      	; 0x94a <__mulsf3+0x1c>
 946:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_inf>
 94a:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_nan>
 94e:	11 24       	eor	r1, r1
 950:	0c 94 91 04 	jmp	0x922	; 0x922 <__fp_szero>

00000954 <__mulsf3x>:
 954:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_split3>
 958:	70 f3       	brcs	.-36     	; 0x936 <__mulsf3+0x8>

0000095a <__mulsf3_pse>:
 95a:	95 9f       	mul	r25, r21
 95c:	c1 f3       	breq	.-16     	; 0x94e <__mulsf3+0x20>
 95e:	95 0f       	add	r25, r21
 960:	50 e0       	ldi	r21, 0x00	; 0
 962:	55 1f       	adc	r21, r21
 964:	62 9f       	mul	r22, r18
 966:	f0 01       	movw	r30, r0
 968:	72 9f       	mul	r23, r18
 96a:	bb 27       	eor	r27, r27
 96c:	f0 0d       	add	r31, r0
 96e:	b1 1d       	adc	r27, r1
 970:	63 9f       	mul	r22, r19
 972:	aa 27       	eor	r26, r26
 974:	f0 0d       	add	r31, r0
 976:	b1 1d       	adc	r27, r1
 978:	aa 1f       	adc	r26, r26
 97a:	64 9f       	mul	r22, r20
 97c:	66 27       	eor	r22, r22
 97e:	b0 0d       	add	r27, r0
 980:	a1 1d       	adc	r26, r1
 982:	66 1f       	adc	r22, r22
 984:	82 9f       	mul	r24, r18
 986:	22 27       	eor	r18, r18
 988:	b0 0d       	add	r27, r0
 98a:	a1 1d       	adc	r26, r1
 98c:	62 1f       	adc	r22, r18
 98e:	73 9f       	mul	r23, r19
 990:	b0 0d       	add	r27, r0
 992:	a1 1d       	adc	r26, r1
 994:	62 1f       	adc	r22, r18
 996:	83 9f       	mul	r24, r19
 998:	a0 0d       	add	r26, r0
 99a:	61 1d       	adc	r22, r1
 99c:	22 1f       	adc	r18, r18
 99e:	74 9f       	mul	r23, r20
 9a0:	33 27       	eor	r19, r19
 9a2:	a0 0d       	add	r26, r0
 9a4:	61 1d       	adc	r22, r1
 9a6:	23 1f       	adc	r18, r19
 9a8:	84 9f       	mul	r24, r20
 9aa:	60 0d       	add	r22, r0
 9ac:	21 1d       	adc	r18, r1
 9ae:	82 2f       	mov	r24, r18
 9b0:	76 2f       	mov	r23, r22
 9b2:	6a 2f       	mov	r22, r26
 9b4:	11 24       	eor	r1, r1
 9b6:	9f 57       	subi	r25, 0x7F	; 127
 9b8:	50 40       	sbci	r21, 0x00	; 0
 9ba:	9a f0       	brmi	.+38     	; 0x9e2 <__mulsf3_pse+0x88>
 9bc:	f1 f0       	breq	.+60     	; 0x9fa <__mulsf3_pse+0xa0>
 9be:	88 23       	and	r24, r24
 9c0:	4a f0       	brmi	.+18     	; 0x9d4 <__mulsf3_pse+0x7a>
 9c2:	ee 0f       	add	r30, r30
 9c4:	ff 1f       	adc	r31, r31
 9c6:	bb 1f       	adc	r27, r27
 9c8:	66 1f       	adc	r22, r22
 9ca:	77 1f       	adc	r23, r23
 9cc:	88 1f       	adc	r24, r24
 9ce:	91 50       	subi	r25, 0x01	; 1
 9d0:	50 40       	sbci	r21, 0x00	; 0
 9d2:	a9 f7       	brne	.-22     	; 0x9be <__mulsf3_pse+0x64>
 9d4:	9e 3f       	cpi	r25, 0xFE	; 254
 9d6:	51 05       	cpc	r21, r1
 9d8:	80 f0       	brcs	.+32     	; 0x9fa <__mulsf3_pse+0xa0>
 9da:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_inf>
 9de:	0c 94 91 04 	jmp	0x922	; 0x922 <__fp_szero>
 9e2:	5f 3f       	cpi	r21, 0xFF	; 255
 9e4:	e4 f3       	brlt	.-8      	; 0x9de <__mulsf3_pse+0x84>
 9e6:	98 3e       	cpi	r25, 0xE8	; 232
 9e8:	d4 f3       	brlt	.-12     	; 0x9de <__mulsf3_pse+0x84>
 9ea:	86 95       	lsr	r24
 9ec:	77 95       	ror	r23
 9ee:	67 95       	ror	r22
 9f0:	b7 95       	ror	r27
 9f2:	f7 95       	ror	r31
 9f4:	e7 95       	ror	r30
 9f6:	9f 5f       	subi	r25, 0xFF	; 255
 9f8:	c1 f7       	brne	.-16     	; 0x9ea <__mulsf3_pse+0x90>
 9fa:	fe 2b       	or	r31, r30
 9fc:	88 0f       	add	r24, r24
 9fe:	91 1d       	adc	r25, r1
 a00:	96 95       	lsr	r25
 a02:	87 95       	ror	r24
 a04:	97 f9       	bld	r25, 7
 a06:	08 95       	ret

00000a08 <__fp_inf>:
 a08:	97 f9       	bld	r25, 7
 a0a:	9f 67       	ori	r25, 0x7F	; 127
 a0c:	80 e8       	ldi	r24, 0x80	; 128
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	60 e0       	ldi	r22, 0x00	; 0
 a12:	08 95       	ret

00000a14 <__fp_nan>:
 a14:	9f ef       	ldi	r25, 0xFF	; 255
 a16:	80 ec       	ldi	r24, 0xC0	; 192
 a18:	08 95       	ret

00000a1a <__fp_pscA>:
 a1a:	00 24       	eor	r0, r0
 a1c:	0a 94       	dec	r0
 a1e:	16 16       	cp	r1, r22
 a20:	17 06       	cpc	r1, r23
 a22:	18 06       	cpc	r1, r24
 a24:	09 06       	cpc	r0, r25
 a26:	08 95       	ret

00000a28 <__fp_pscB>:
 a28:	00 24       	eor	r0, r0
 a2a:	0a 94       	dec	r0
 a2c:	12 16       	cp	r1, r18
 a2e:	13 06       	cpc	r1, r19
 a30:	14 06       	cpc	r1, r20
 a32:	05 06       	cpc	r0, r21
 a34:	08 95       	ret

00000a36 <__fp_round>:
 a36:	09 2e       	mov	r0, r25
 a38:	03 94       	inc	r0
 a3a:	00 0c       	add	r0, r0
 a3c:	11 f4       	brne	.+4      	; 0xa42 <__fp_round+0xc>
 a3e:	88 23       	and	r24, r24
 a40:	52 f0       	brmi	.+20     	; 0xa56 <__fp_round+0x20>
 a42:	bb 0f       	add	r27, r27
 a44:	40 f4       	brcc	.+16     	; 0xa56 <__fp_round+0x20>
 a46:	bf 2b       	or	r27, r31
 a48:	11 f4       	brne	.+4      	; 0xa4e <__fp_round+0x18>
 a4a:	60 ff       	sbrs	r22, 0
 a4c:	04 c0       	rjmp	.+8      	; 0xa56 <__fp_round+0x20>
 a4e:	6f 5f       	subi	r22, 0xFF	; 255
 a50:	7f 4f       	sbci	r23, 0xFF	; 255
 a52:	8f 4f       	sbci	r24, 0xFF	; 255
 a54:	9f 4f       	sbci	r25, 0xFF	; 255
 a56:	08 95       	ret

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
