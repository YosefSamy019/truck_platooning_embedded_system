
master_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000402  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800066  00800066  0000049c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea1  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a19  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000917  00000000  00000000  00001f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  0000282c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000568  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a7  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003937  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_10>
  2c:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  8a:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <c>:
#include "SPI/SPI_interface.h"

#include "MOTOR/MOTOR.h"

void c(char c){
	UART_sendStr("A");
  92:	80 e6       	ldi	r24, 0x60	; 96
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 c5 01 	call	0x38a	; 0x38a <UART_sendStr>
		PORTA ^= 1;
  9a:	9b b3       	in	r25, 0x1b	; 27
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	89 27       	eor	r24, r25
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	08 95       	ret

000000a4 <main>:
}

*/

void main(){
			GI_voidEnable();
  a4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <GI_voidEnable>

					DIO_pinMode(PIN_A0,OUTPUT);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	80 ea       	ldi	r24, 0xA0	; 160
  ac:	0e 94 65 00 	call	0xca	; 0xca <DIO_pinMode>

		
	SPI_init();
  b0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SPI_init>
	//
	//MOTOR_setMotion(stop);
	//MOTOR_setRotate(noRotate);
	//MOTOR_setDutyCycle(50);
	//
	SPI_setCallback(c);
  b4:	89 e4       	ldi	r24, 0x49	; 73
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 17 01 	call	0x22e	; 0x22e <SPI_setCallback>
	
	UART_init();
  bc:	0e 94 bc 01 	call	0x378	; 0x378 <UART_init>
	UART_sendStr("HI");
  c0:	82 e6       	ldi	r24, 0x62	; 98
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 c5 01 	call	0x38a	; 0x38a <UART_sendStr>
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x24>

000000ca <DIO_pinMode>:

#include "DIO_interface.h"

void DIO_pinMode(char PIN_NO,char DIR){
	char pin,port;
	pin =  PIN_NO & 0x0f;
  ca:	98 2f       	mov	r25, r24
  cc:	9f 70       	andi	r25, 0x0F	; 15
	port = PIN_NO & 0xf0;
  ce:	80 7f       	andi	r24, 0xF0	; 240
	
	switch(DIR){
  d0:	66 23       	and	r22, r22
  d2:	09 f4       	brne	.+2      	; 0xd6 <DIO_pinMode+0xc>
  d4:	42 c0       	rjmp	.+132    	; 0x15a <DIO_pinMode+0x90>
  d6:	61 30       	cpi	r22, 0x01	; 1
  d8:	09 f0       	breq	.+2      	; 0xdc <DIO_pinMode+0x12>
  da:	81 c0       	rjmp	.+258    	; 0x1de <DIO_pinMode+0x114>
		case OUTPUT:
		switch (port){
  dc:	80 3b       	cpi	r24, 0xB0	; 176
  de:	b1 f0       	breq	.+44     	; 0x10c <DIO_pinMode+0x42>
  e0:	18 f4       	brcc	.+6      	; 0xe8 <DIO_pinMode+0x1e>
  e2:	80 3a       	cpi	r24, 0xA0	; 160
  e4:	31 f0       	breq	.+12     	; 0xf2 <DIO_pinMode+0x28>
  e6:	08 95       	ret
  e8:	80 3c       	cpi	r24, 0xC0	; 192
  ea:	e9 f0       	breq	.+58     	; 0x126 <DIO_pinMode+0x5c>
  ec:	80 3d       	cpi	r24, 0xD0	; 208
  ee:	41 f1       	breq	.+80     	; 0x140 <DIO_pinMode+0x76>
  f0:	08 95       	ret
			case A:SET_BIT(DDRA,pin); break;
  f2:	4a b3       	in	r20, 0x1a	; 26
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	b9 01       	movw	r22, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_pinMode+0x36>
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	9a 95       	dec	r25
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_pinMode+0x32>
 104:	cb 01       	movw	r24, r22
 106:	84 2b       	or	r24, r20
 108:	8a bb       	out	0x1a, r24	; 26
 10a:	08 95       	ret
			case B:SET_BIT(DDRB,pin); break;
 10c:	47 b3       	in	r20, 0x17	; 23
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	b9 01       	movw	r22, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_pinMode+0x50>
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	9a 95       	dec	r25
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_pinMode+0x4c>
 11e:	cb 01       	movw	r24, r22
 120:	84 2b       	or	r24, r20
 122:	87 bb       	out	0x17, r24	; 23
 124:	08 95       	ret
			case C:SET_BIT(DDRC,pin); break;
 126:	44 b3       	in	r20, 0x14	; 20
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_pinMode+0x6a>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	9a 95       	dec	r25
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_pinMode+0x66>
 138:	cb 01       	movw	r24, r22
 13a:	84 2b       	or	r24, r20
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
			case D:SET_BIT(DDRD,pin); break;
 140:	41 b3       	in	r20, 0x11	; 17
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	b9 01       	movw	r22, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_pinMode+0x84>
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	9a 95       	dec	r25
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_pinMode+0x80>
 152:	cb 01       	movw	r24, r22
 154:	84 2b       	or	r24, r20
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
		}
		break;
		case INPUT:
		switch (port){
 15a:	80 3b       	cpi	r24, 0xB0	; 176
 15c:	b9 f0       	breq	.+46     	; 0x18c <DIO_pinMode+0xc2>
 15e:	18 f4       	brcc	.+6      	; 0x166 <DIO_pinMode+0x9c>
 160:	80 3a       	cpi	r24, 0xA0	; 160
 162:	31 f0       	breq	.+12     	; 0x170 <DIO_pinMode+0xa6>
 164:	08 95       	ret
 166:	80 3c       	cpi	r24, 0xC0	; 192
 168:	f9 f0       	breq	.+62     	; 0x1a8 <DIO_pinMode+0xde>
 16a:	80 3d       	cpi	r24, 0xD0	; 208
 16c:	59 f1       	breq	.+86     	; 0x1c4 <DIO_pinMode+0xfa>
 16e:	08 95       	ret
			case A:CLR_BIT(DDRA,pin); break;
 170:	4a b3       	in	r20, 0x1a	; 26
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_pinMode+0xb4>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	9a 95       	dec	r25
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_pinMode+0xb0>
 182:	cb 01       	movw	r24, r22
 184:	80 95       	com	r24
 186:	84 23       	and	r24, r20
 188:	8a bb       	out	0x1a, r24	; 26
 18a:	08 95       	ret
			case B:CLR_BIT(DDRB,pin); break;
 18c:	47 b3       	in	r20, 0x17	; 23
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_pinMode+0xd0>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	9a 95       	dec	r25
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_pinMode+0xcc>
 19e:	cb 01       	movw	r24, r22
 1a0:	80 95       	com	r24
 1a2:	84 23       	and	r24, r20
 1a4:	87 bb       	out	0x17, r24	; 23
 1a6:	08 95       	ret
			case C:CLR_BIT(DDRC,pin); break;
 1a8:	44 b3       	in	r20, 0x14	; 20
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	b9 01       	movw	r22, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_pinMode+0xec>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	9a 95       	dec	r25
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_pinMode+0xe8>
 1ba:	cb 01       	movw	r24, r22
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	84 bb       	out	0x14, r24	; 20
 1c2:	08 95       	ret
			case D:CLR_BIT(DDRD,pin); break;
 1c4:	41 b3       	in	r20, 0x11	; 17
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	b9 01       	movw	r22, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_pinMode+0x108>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	9a 95       	dec	r25
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_pinMode+0x104>
 1d6:	cb 01       	movw	r24, r22
 1d8:	80 95       	com	r24
 1da:	84 23       	and	r24, r20
 1dc:	81 bb       	out	0x11, r24	; 17
 1de:	08 95       	ret

000001e0 <GI_voidEnable>:



void GI_voidEnable(void)
{
	SET_BIT(SREG,SPEG_I);
 1e0:	8f b7       	in	r24, 0x3f	; 63
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	8f bf       	out	0x3f, r24	; 63
 1e6:	08 95       	ret

000001e8 <SPI_init>:
		i++;
	}
	
	if(i==1000) return 0;
	else return ((uint8)SPDR_REG);
}
 1e8:	8d b1       	in	r24, 0x0d	; 13
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	8d b9       	out	0x0d, r24	; 13
 1ee:	8d b1       	in	r24, 0x0d	; 13
 1f0:	8f 7d       	andi	r24, 0xDF	; 223
 1f2:	8d b9       	out	0x0d, r24	; 13
 1f4:	8d b1       	in	r24, 0x0d	; 13
 1f6:	87 7f       	andi	r24, 0xF7	; 247
 1f8:	8d b9       	out	0x0d, r24	; 13
 1fa:	8d b1       	in	r24, 0x0d	; 13
 1fc:	8b 7f       	andi	r24, 0xFB	; 251
 1fe:	8d b9       	out	0x0d, r24	; 13
 200:	8d b1       	in	r24, 0x0d	; 13
 202:	8f 7e       	andi	r24, 0xEF	; 239
 204:	8d b9       	out	0x0d, r24	; 13
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	85 eb       	ldi	r24, 0xB5	; 181
 20a:	0e 94 65 00 	call	0xca	; 0xca <DIO_pinMode>
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	86 eb       	ldi	r24, 0xB6	; 182
 212:	0e 94 65 00 	call	0xca	; 0xca <DIO_pinMode>
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	84 eb       	ldi	r24, 0xB4	; 180
 21a:	0e 94 65 00 	call	0xca	; 0xca <DIO_pinMode>
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	87 eb       	ldi	r24, 0xB7	; 183
 222:	0e 94 65 00 	call	0xca	; 0xca <DIO_pinMode>
 226:	8d b1       	in	r24, 0x0d	; 13
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	8d b9       	out	0x0d, r24	; 13
 22c:	08 95       	ret

0000022e <SPI_setCallback>:

#if SPI_ENABLE_INTERRUPT==1||SPI_MODE==SPI_SLAVE_MODE
	static volatile func_uint8_ptr callback = NULL;
	
	void SPI_setCallback(func_uint8_ptr fptr){
		callback = fptr;
 22e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 232:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 236:	08 95       	ret

00000238 <__vector_10>:
	}
	
	ISR(SPI_STC_vect) {
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
		if(callback != NULL){
 25a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 25e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 262:	89 2b       	or	r24, r25
 264:	31 f0       	breq	.+12     	; 0x272 <__vector_10+0x3a>
			callback((uint8)SPDR_REG);
 266:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
 26a:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
 26e:	8f b1       	in	r24, 0x0f	; 15
 270:	09 95       	icall
		}
	}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_6>:
void TIMER1_setCallBack(void (*ptr2fun)()) {
    timer1_callback = ptr2fun;
}

// Timer1 ISR (every 50 ms)
ISR(TIMER1_COMPA_vect) {
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
    if (timer1_callback != NULL) {
 2b6:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <timer1_callback>
 2ba:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <timer1_callback+0x1>
 2be:	30 97       	sbiw	r30, 0x00	; 0
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <__vector_6+0x30>
        timer1_callback();
 2c2:	09 95       	icall
    }
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_3>:

//Timer/Counter2 Compare ISR
#if TIMER2_MODE_SELECT == TIMER2_MODE_CTC
	
	
	ISR(TIMER2_COMP_vect){
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	4f 93       	push	r20
 2f6:	5f 93       	push	r21
 2f8:	6f 93       	push	r22
 2fa:	7f 93       	push	r23
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31
		static uint32 counter = 0;
		counter++;
 308:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.1639>
 30c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <counter.1639+0x1>
 310:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <counter.1639+0x2>
 314:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <counter.1639+0x3>
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	a1 1d       	adc	r26, r1
 31c:	b1 1d       	adc	r27, r1
 31e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <counter.1639>
 322:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <counter.1639+0x1>
 326:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <counter.1639+0x2>
 32a:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <counter.1639+0x3>

		if(counter == TIMER2_MAX_COUNT){
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	a1 05       	cpc	r26, r1
 332:	b1 05       	cpc	r27, r1
 334:	81 f4       	brne	.+32     	; 0x356 <__vector_3+0x70>
			counter = 0;
 336:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <counter.1639>
 33a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <counter.1639+0x1>
 33e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <counter.1639+0x2>
 342:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <counter.1639+0x3>
			TCNT2_REG = TIMER2_PRELOAD_VAL;
 346:	14 bc       	out	0x24, r1	; 36
			
			if(callback != NULL){
 348:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <callback>
 34c:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <callback+0x1>
 350:	30 97       	sbiw	r30, 0x00	; 0
 352:	09 f0       	breq	.+2      	; 0x356 <__vector_3+0x70>
				callback();
 354:	09 95       	icall
			}
			
		}
	}
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <UART_init>:
}

void UART_onReceive(void (*ptr2fun)(uint8 c)) {
	UART_receiveCallback = ptr2fun;
	// Enable the UART Receive Complete interrupt
	UCSRB |= (1 << RXCIE);
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	80 bd       	out	0x20, r24	; 32
 37c:	80 e4       	ldi	r24, 0x40	; 64
 37e:	89 b9       	out	0x09, r24	; 9
 380:	88 e1       	ldi	r24, 0x18	; 24
 382:	8a b9       	out	0x0a, r24	; 10
 384:	86 e0       	ldi	r24, 0x06	; 6
 386:	80 bd       	out	0x20, r24	; 32
 388:	08 95       	ret

0000038a <UART_sendStr>:
 38a:	ac 01       	movw	r20, r24
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	05 c0       	rjmp	.+10     	; 0x39c <UART_sendStr+0x12>
 392:	5d 9b       	sbis	0x0b, 5	; 11
 394:	fe cf       	rjmp	.-4      	; 0x392 <UART_sendStr+0x8>
 396:	9c b9       	out	0x0c, r25	; 12
 398:	2f 5f       	subi	r18, 0xFF	; 255
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
 39c:	fa 01       	movw	r30, r20
 39e:	e2 0f       	add	r30, r18
 3a0:	f3 1f       	adc	r31, r19
 3a2:	90 81       	ld	r25, Z
 3a4:	91 11       	cpse	r25, r1
 3a6:	f5 cf       	rjmp	.-22     	; 0x392 <UART_sendStr+0x8>
 3a8:	08 95       	ret

000003aa <__vector_11>:
}

ISR(USART_RXC_vect) {
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	2f 93       	push	r18
 3b6:	3f 93       	push	r19
 3b8:	4f 93       	push	r20
 3ba:	5f 93       	push	r21
 3bc:	6f 93       	push	r22
 3be:	7f 93       	push	r23
 3c0:	8f 93       	push	r24
 3c2:	9f 93       	push	r25
 3c4:	af 93       	push	r26
 3c6:	bf 93       	push	r27
 3c8:	ef 93       	push	r30
 3ca:	ff 93       	push	r31
	if (UART_receiveCallback) {
 3cc:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <UART_receiveCallback>
 3d0:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <UART_receiveCallback+0x1>
 3d4:	30 97       	sbiw	r30, 0x00	; 0
 3d6:	11 f0       	breq	.+4      	; 0x3dc <__vector_11+0x32>
		uint8 receivedChar = UDR;  // Read the received data
 3d8:	8c b1       	in	r24, 0x0c	; 12
		UART_receiveCallback(receivedChar);  // Call the user-defined function
 3da:	09 95       	icall
	}
}
 3dc:	ff 91       	pop	r31
 3de:	ef 91       	pop	r30
 3e0:	bf 91       	pop	r27
 3e2:	af 91       	pop	r26
 3e4:	9f 91       	pop	r25
 3e6:	8f 91       	pop	r24
 3e8:	7f 91       	pop	r23
 3ea:	6f 91       	pop	r22
 3ec:	5f 91       	pop	r21
 3ee:	4f 91       	pop	r20
 3f0:	3f 91       	pop	r19
 3f2:	2f 91       	pop	r18
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
