
slave_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000009b8  00000a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800066  00800066  00000a52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000150c  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac4  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5d  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063d  00000000  00000000  00003ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000854  00000000  00000000  00004101  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 41 01 	call	0x282	; 0x282 <main>
  8a:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MOTOR_control>:
	MOTOR_control();
}

static void MOTOR_control(void) {
	// Handle combined motion and rotation
	switch (currentMotion) {
  92:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <currentMotion>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	09 f4       	brne	.+2      	; 0x9c <MOTOR_control+0xa>
  9a:	40 c0       	rjmp	.+128    	; 0x11c <MOTOR_control+0x8a>
  9c:	20 f0       	brcs	.+8      	; 0xa6 <MOTOR_control+0x14>
  9e:	82 30       	cpi	r24, 0x02	; 2
  a0:	09 f4       	brne	.+2      	; 0xa4 <MOTOR_control+0x12>
  a2:	77 c0       	rjmp	.+238    	; 0x192 <MOTOR_control+0x100>
  a4:	08 95       	ret
		case forward:
		switch (currentRotation) {
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	21 f0       	breq	.+8      	; 0xb6 <MOTOR_control+0x24>
  ae:	a0 f0       	brcs	.+40     	; 0xd8 <MOTOR_control+0x46>
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	19 f1       	breq	.+70     	; 0xfa <MOTOR_control+0x68>
  b4:	08 95       	ret
			case left:
			DIO_pinMode(IN1, HIGH);
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	84 ec       	ldi	r24, 0xC4	; 196
  ba:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN2, LOW);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	85 ec       	ldi	r24, 0xC5	; 197
  c2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN3, LOW);
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	86 ec       	ldi	r24, 0xC6	; 198
  ca:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN4, LOW);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	87 ec       	ldi	r24, 0xC7	; 199
  d2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			break;
  d6:	08 95       	ret
			case right:
			DIO_pinMode(IN1, LOW);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	84 ec       	ldi	r24, 0xC4	; 196
  dc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN2, LOW);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	85 ec       	ldi	r24, 0xC5	; 197
  e4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN3, HIGH);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	86 ec       	ldi	r24, 0xC6	; 198
  ec:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN4, LOW);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	87 ec       	ldi	r24, 0xC7	; 199
  f4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			break;
  f8:	08 95       	ret
			case noRotate:
			DIO_pinMode(IN1, HIGH);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	84 ec       	ldi	r24, 0xC4	; 196
  fe:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN2, LOW);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	85 ec       	ldi	r24, 0xC5	; 197
 106:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN3, HIGH);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	86 ec       	ldi	r24, 0xC6	; 198
 10e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN4, LOW);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	87 ec       	ldi	r24, 0xC7	; 199
 116:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			break;
 11a:	08 95       	ret
		}
		break;
		case backward:
		switch (currentRotation) {
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	a9 f0       	breq	.+42     	; 0x14e <MOTOR_control+0xbc>
 124:	18 f0       	brcs	.+6      	; 0x12c <MOTOR_control+0x9a>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	19 f1       	breq	.+70     	; 0x170 <MOTOR_control+0xde>
 12a:	08 95       	ret
			case right:
			DIO_pinMode(IN1, LOW);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	84 ec       	ldi	r24, 0xC4	; 196
 130:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN2, LOW);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	85 ec       	ldi	r24, 0xC5	; 197
 138:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN3, LOW);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	86 ec       	ldi	r24, 0xC6	; 198
 140:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN4, HIGH);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	87 ec       	ldi	r24, 0xC7	; 199
 148:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			break;
 14c:	08 95       	ret
			case left:
			DIO_pinMode(IN1, LOW);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	84 ec       	ldi	r24, 0xC4	; 196
 152:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN2, HIGH);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	85 ec       	ldi	r24, 0xC5	; 197
 15a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN3, LOW);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	86 ec       	ldi	r24, 0xC6	; 198
 162:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN4, LOW);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	87 ec       	ldi	r24, 0xC7	; 199
 16a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			break;
 16e:	08 95       	ret
			case noRotate:
			DIO_pinMode(IN1, LOW);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	84 ec       	ldi	r24, 0xC4	; 196
 174:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN2, HIGH);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	85 ec       	ldi	r24, 0xC5	; 197
 17c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN3, LOW);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	86 ec       	ldi	r24, 0xC6	; 198
 184:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			DIO_pinMode(IN4, HIGH);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	87 ec       	ldi	r24, 0xC7	; 199
 18c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
			break;
 190:	08 95       	ret
		}
		break;
		case stop:
		DIO_pinMode(IN1, LOW);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	84 ec       	ldi	r24, 0xC4	; 196
 196:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
		DIO_pinMode(IN2, LOW);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	85 ec       	ldi	r24, 0xC5	; 197
 19e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
		DIO_pinMode(IN3, LOW);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	86 ec       	ldi	r24, 0xC6	; 198
 1a6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
		DIO_pinMode(IN4, LOW);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	87 ec       	ldi	r24, 0xC7	; 199
 1ae:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
 1b2:	08 95       	ret

000001b4 <MOTOR_init>:

static void MOTOR_control(void) ;

void MOTOR_init(void) {
	// Set motor control pins as outputs
	DIO_pinMode(IN1, OUTPUT);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	84 ec       	ldi	r24, 0xC4	; 196
 1b8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
	DIO_pinMode(IN2, OUTPUT);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	85 ec       	ldi	r24, 0xC5	; 197
 1c0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
	DIO_pinMode(IN3, OUTPUT);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	86 ec       	ldi	r24, 0xC6	; 198
 1c8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
	DIO_pinMode(IN4, OUTPUT);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	87 ec       	ldi	r24, 0xC7	; 199
 1d0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>

	// Initialize motors to be stopped
	DIO_digitalWrite(IN1, LOW);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	84 ec       	ldi	r24, 0xC4	; 196
 1d8:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
	DIO_digitalWrite(IN2, LOW);
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	85 ec       	ldi	r24, 0xC5	; 197
 1e0:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
	DIO_digitalWrite(IN3, LOW);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	86 ec       	ldi	r24, 0xC6	; 198
 1e8:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
	DIO_digitalWrite(IN4, LOW);
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	87 ec       	ldi	r24, 0xC7	; 199
 1f0:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
 1f4:	08 95       	ret

000001f6 <MOTOR_setDutyCycle>:
}

void MOTOR_setDutyCycle(char speed) {
	// This function is assumed to call TIMER0_setDutyCycle from timer0 driver
	TIMER0_setDutyCycle(speed);
 1f6:	0e 94 2d 03 	call	0x65a	; 0x65a <TIMER0_setDutyCycle>
 1fa:	08 95       	ret

000001fc <MOTOR_setMotion>:
	
}

void MOTOR_setMotion(enum motion m) {
	currentMotion = m;
 1fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <currentMotion>
	MOTOR_control();
 200:	0e 94 49 00 	call	0x92	; 0x92 <MOTOR_control>
 204:	08 95       	ret

00000206 <MOTOR_setRotate>:
}

void MOTOR_setRotate(enum rotation r) {
	currentRotation = r;
 206:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	MOTOR_control();
 20a:	0e 94 49 00 	call	0x92	; 0x92 <MOTOR_control>
 20e:	08 95       	ret

00000210 <uart_receive>:
		
    }
}

void uart_receive(uint8 c){
	if(c == C_FORWARD || c == (C_FORWARD + 32) ){
 210:	86 34       	cpi	r24, 0x46	; 70
 212:	11 f0       	breq	.+4      	; 0x218 <uart_receive+0x8>
 214:	86 36       	cpi	r24, 0x66	; 102
 216:	19 f4       	brne	.+6      	; 0x21e <uart_receive+0xe>
		curMotion = forward;
 218:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <curMotion>
 21c:	08 95       	ret
	}
	else if(c == C_BACKWARD || c == (C_BACKWARD + 32)){
 21e:	82 34       	cpi	r24, 0x42	; 66
 220:	11 f0       	breq	.+4      	; 0x226 <uart_receive+0x16>
 222:	82 36       	cpi	r24, 0x62	; 98
 224:	21 f4       	brne	.+8      	; 0x22e <uart_receive+0x1e>
			curMotion = backward;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <curMotion>
 22c:	08 95       	ret
	}
	else if(c == C_STOP || c == (C_STOP + 32)){
 22e:	83 35       	cpi	r24, 0x53	; 83
 230:	11 f0       	breq	.+4      	; 0x236 <uart_receive+0x26>
 232:	83 37       	cpi	r24, 0x73	; 115
 234:	21 f4       	brne	.+8      	; 0x23e <uart_receive+0x2e>
			curMotion = stop;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <curMotion>
 23c:	08 95       	ret
	}
	
	else if(c == C_RIGHT || c == (C_RIGHT + 32)){
 23e:	82 35       	cpi	r24, 0x52	; 82
 240:	11 f0       	breq	.+4      	; 0x246 <uart_receive+0x36>
 242:	82 37       	cpi	r24, 0x72	; 114
 244:	19 f4       	brne	.+6      	; 0x24c <uart_receive+0x3c>
		futureRotation = right;
 246:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <futureRotation>
 24a:	08 95       	ret
	}else if(c == C_LEFT || c == (C_LEFT + 32)){
 24c:	8c 34       	cpi	r24, 0x4C	; 76
 24e:	11 f0       	breq	.+4      	; 0x254 <uart_receive+0x44>
 250:	8c 36       	cpi	r24, 0x6C	; 108
 252:	21 f4       	brne	.+8      	; 0x25c <uart_receive+0x4c>
		futureRotation = left;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <futureRotation>
 25a:	08 95       	ret
	}else if(c == C_NO_ROTATE || c == (C_NO_ROTATE + 32)){
 25c:	8e 34       	cpi	r24, 0x4E	; 78
 25e:	11 f0       	breq	.+4      	; 0x264 <uart_receive+0x54>
 260:	8e 36       	cpi	r24, 0x6E	; 110
 262:	19 f4       	brne	.+6      	; 0x26a <uart_receive+0x5a>
		futureRotation = noRotate;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <futureRotation>
 26a:	08 95       	ret

0000026c <timer1_callback>:
}

void timer1_callback(void){
	//call each 50 milli

	if(curMotion == stop){
 26c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <curMotion>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	19 f4       	brne	.+6      	; 0x27a <timer1_callback+0xe>
		curRotation = noRotate;
 274:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <curRotation>
 278:	08 95       	ret
	}else{
		shiftArrFlag = 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 280:	08 95       	ret

00000282 <main>:

uint8 shiftArrFlag = 0;

int main(void)
{
	uint32 i=0;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	dc 01       	movw	r26, r24
	while(i<ROTATE_ARR_SIZE){
 288:	08 c0       	rjmp	.+16     	; 0x29a <main+0x18>
		rotateWatcher[i] = noRotate;
 28a:	fc 01       	movw	r30, r24
 28c:	e5 59       	subi	r30, 0x95	; 149
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	22 e0       	ldi	r18, 0x02	; 2
 292:	20 83       	st	Z, r18
		i++;
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	a1 1d       	adc	r26, r1
 298:	b1 1d       	adc	r27, r1
uint8 shiftArrFlag = 0;

int main(void)
{
	uint32 i=0;
	while(i<ROTATE_ARR_SIZE){
 29a:	89 31       	cpi	r24, 0x19	; 25
 29c:	91 05       	cpc	r25, r1
 29e:	a1 05       	cpc	r26, r1
 2a0:	b1 05       	cpc	r27, r1
 2a2:	98 f3       	brcs	.-26     	; 0x28a <main+0x8>
		rotateWatcher[i] = noRotate;
		i++;
	}
	
	//leds
	DIO_pinMode(PIN_A0,OUTPUT);
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	80 ea       	ldi	r24, 0xA0	; 160
 2a8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
	DIO_pinMode(PIN_A1,OUTPUT);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	81 ea       	ldi	r24, 0xA1	; 161
 2b0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
	DIO_pinMode(PIN_A2,OUTPUT);
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	82 ea       	ldi	r24, 0xA2	; 162
 2b8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
	DIO_pinMode(PIN_A3,OUTPUT);
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	83 ea       	ldi	r24, 0xA3	; 163
 2c0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>

	DIO_digitalWrite(PIN_A0, HIGH);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	80 ea       	ldi	r24, 0xA0	; 160
 2c8:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
	DIO_digitalWrite(PIN_A1, HIGH);
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	81 ea       	ldi	r24, 0xA1	; 161
 2d0:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
	
	DIO_digitalWrite(PIN_A2,HIGH);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	82 ea       	ldi	r24, 0xA2	; 162
 2d8:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
	DIO_digitalWrite(PIN_A3,HIGH);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	83 ea       	ldi	r24, 0xA3	; 163
 2e0:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	83 ed       	ldi	r24, 0xD3	; 211
 2e8:	90 e3       	ldi	r25, 0x30	; 48
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0x68>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x72>
 2f4:	00 00       	nop
	_delay_ms(1000);
	

	GI_voidEnable();
 2f6:	0e 94 0f 03 	call	0x61e	; 0x61e <GI_voidEnable>
	TIMER0_init();
 2fa:	0e 94 13 03 	call	0x626	; 0x626 <TIMER0_init>
	TIMER1_init();
 2fe:	0e 94 3d 03 	call	0x67a	; 0x67a <TIMER1_init>
	UART_init();
 302:	0e 94 76 03 	call	0x6ec	; 0x6ec <UART_init>
	MOTOR_init();
 306:	0e 94 da 00 	call	0x1b4	; 0x1b4 <MOTOR_init>
	
	MOTOR_setDutyCycle(30);
 30a:	8e e1       	ldi	r24, 0x1E	; 30
 30c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <MOTOR_setDutyCycle>
	MOTOR_setMotion(curMotion);
 310:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <curMotion>
 314:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MOTOR_setMotion>
	MOTOR_setRotate(curRotation);
 318:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <curRotation>
 31c:	0e 94 03 01 	call	0x206	; 0x206 <MOTOR_setRotate>
	
	TIMER1_setCallBack(timer1_callback);
 320:	86 e3       	ldi	r24, 0x36	; 54
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 48 03 	call	0x690	; 0x690 <TIMER1_setCallBack>
	UART_onReceive(uart_receive);
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <UART_onReceive>
	
    while (1) 
    {
		MOTOR_setMotion(curMotion);
 330:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <curMotion>
 334:	0e 94 fe 00 	call	0x1fc	; 0x1fc <MOTOR_setMotion>
		MOTOR_setRotate(curRotation);
 338:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <curRotation>
 33c:	0e 94 03 01 	call	0x206	; 0x206 <MOTOR_setRotate>
		
		DIO_digitalWrite(PIN_A0, curMotion == forward);
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <curMotion>
 346:	81 11       	cpse	r24, r1
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	80 ea       	ldi	r24, 0xA0	; 160
 34c:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
		DIO_digitalWrite(PIN_A1, curMotion == backward);
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <curMotion>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	09 f0       	breq	.+2      	; 0x35c <main+0xda>
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	81 ea       	ldi	r24, 0xA1	; 161
 35e:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
		
		DIO_digitalWrite(PIN_A2, curRotation == right && curMotion != stop);
 362:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <curRotation>
 366:	81 11       	cpse	r24, r1
 368:	06 c0       	rjmp	.+12     	; 0x376 <main+0xf4>
 36a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <curMotion>
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	21 f4       	brne	.+8      	; 0x37a <main+0xf8>
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	03 c0       	rjmp	.+6      	; 0x37c <main+0xfa>
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	01 c0       	rjmp	.+2      	; 0x37c <main+0xfa>
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	82 ea       	ldi	r24, 0xA2	; 162
 37e:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
		DIO_digitalWrite(PIN_A3, curRotation == left && curMotion != stop);
 382:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <curRotation>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	31 f4       	brne	.+12     	; 0x396 <main+0x114>
 38a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <curMotion>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	21 f4       	brne	.+8      	; 0x39a <main+0x118>
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	03 c0       	rjmp	.+6      	; 0x39c <main+0x11a>
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	01 c0       	rjmp	.+2      	; 0x39c <main+0x11a>
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	83 ea       	ldi	r24, 0xA3	; 163
 39e:	0e 94 84 02 	call	0x508	; 0x508 <DIO_digitalWrite>
		
		
		
		if(shiftArrFlag == 1){
 3a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	19 f6       	brne	.-122    	; 0x330 <main+0xae>
			curRotation = rotateWatcher[ROTATE_ARR_SIZE - 1];
 3aa:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <rotateWatcher+0x18>
 3ae:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <curRotation>
			
			//shift
			uint32 i;
			for(i = ROTATE_ARR_SIZE-1 ; i>0; i--){
 3b2:	88 e1       	ldi	r24, 0x18	; 24
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	a0 e0       	ldi	r26, 0x00	; 0
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	10 c0       	rjmp	.+32     	; 0x3dc <main+0x15a>
				rotateWatcher[i] = rotateWatcher[i - 1];
 3bc:	ac 01       	movw	r20, r24
 3be:	bd 01       	movw	r22, r26
 3c0:	41 50       	subi	r20, 0x01	; 1
 3c2:	51 09       	sbc	r21, r1
 3c4:	61 09       	sbc	r22, r1
 3c6:	71 09       	sbc	r23, r1
 3c8:	fa 01       	movw	r30, r20
 3ca:	e5 59       	subi	r30, 0x95	; 149
 3cc:	ff 4f       	sbci	r31, 0xFF	; 255
 3ce:	20 81       	ld	r18, Z
 3d0:	fc 01       	movw	r30, r24
 3d2:	e5 59       	subi	r30, 0x95	; 149
 3d4:	ff 4f       	sbci	r31, 0xFF	; 255
 3d6:	20 83       	st	Z, r18
		if(shiftArrFlag == 1){
			curRotation = rotateWatcher[ROTATE_ARR_SIZE - 1];
			
			//shift
			uint32 i;
			for(i = ROTATE_ARR_SIZE-1 ; i>0; i--){
 3d8:	db 01       	movw	r26, r22
 3da:	ca 01       	movw	r24, r20
 3dc:	00 97       	sbiw	r24, 0x00	; 0
 3de:	a1 05       	cpc	r26, r1
 3e0:	b1 05       	cpc	r27, r1
 3e2:	61 f7       	brne	.-40     	; 0x3bc <main+0x13a>
				rotateWatcher[i] = rotateWatcher[i - 1];
			}
			
			rotateWatcher[0] = futureRotation;
 3e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <futureRotation>
 3e8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <rotateWatcher>
			
			shiftArrFlag = 0;
 3ec:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
 3f0:	9f cf       	rjmp	.-194    	; 0x330 <main+0xae>

000003f2 <DIO_pinMode>:

#include "DIO_interface.h"

void DIO_pinMode(char PIN_NO,char DIR){
	char pin,port;
	pin =  PIN_NO & 0x0f;
 3f2:	98 2f       	mov	r25, r24
 3f4:	9f 70       	andi	r25, 0x0F	; 15
	port = PIN_NO & 0xf0;
 3f6:	80 7f       	andi	r24, 0xF0	; 240
	
	switch(DIR){
 3f8:	66 23       	and	r22, r22
 3fa:	09 f4       	brne	.+2      	; 0x3fe <DIO_pinMode+0xc>
 3fc:	42 c0       	rjmp	.+132    	; 0x482 <__stack+0x23>
 3fe:	61 30       	cpi	r22, 0x01	; 1
 400:	09 f0       	breq	.+2      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 402:	81 c0       	rjmp	.+258    	; 0x506 <__stack+0xa7>
		case OUTPUT:
		switch (port){
 404:	80 3b       	cpi	r24, 0xB0	; 176
 406:	b1 f0       	breq	.+44     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 408:	18 f4       	brcc	.+6      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 40a:	80 3a       	cpi	r24, 0xA0	; 160
 40c:	31 f0       	breq	.+12     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 40e:	08 95       	ret
 410:	80 3c       	cpi	r24, 0xC0	; 192
 412:	e9 f0       	breq	.+58     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 414:	80 3d       	cpi	r24, 0xD0	; 208
 416:	41 f1       	breq	.+80     	; 0x468 <__stack+0x9>
 418:	08 95       	ret
			case A:SET_BIT(DDRA,pin); break;
 41a:	4a b3       	in	r20, 0x1a	; 26
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	9a 95       	dec	r25
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 42c:	cb 01       	movw	r24, r22
 42e:	84 2b       	or	r24, r20
 430:	8a bb       	out	0x1a, r24	; 26
 432:	08 95       	ret
			case B:SET_BIT(DDRB,pin); break;
 434:	47 b3       	in	r20, 0x17	; 23
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	b9 01       	movw	r22, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__DATA_REGION_LENGTH__+0x42>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	9a 95       	dec	r25
 444:	e2 f7       	brpl	.-8      	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
 446:	cb 01       	movw	r24, r22
 448:	84 2b       	or	r24, r20
 44a:	87 bb       	out	0x17, r24	; 23
 44c:	08 95       	ret
			case C:SET_BIT(DDRC,pin); break;
 44e:	44 b3       	in	r20, 0x14	; 20
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	b9 01       	movw	r22, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	9a 95       	dec	r25
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 460:	cb 01       	movw	r24, r22
 462:	84 2b       	or	r24, r20
 464:	84 bb       	out	0x14, r24	; 20
 466:	08 95       	ret
			case D:SET_BIT(DDRD,pin); break;
 468:	41 b3       	in	r20, 0x11	; 17
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	b9 01       	movw	r22, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <__stack+0x17>
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	9a 95       	dec	r25
 478:	e2 f7       	brpl	.-8      	; 0x472 <__stack+0x13>
 47a:	cb 01       	movw	r24, r22
 47c:	84 2b       	or	r24, r20
 47e:	81 bb       	out	0x11, r24	; 17
 480:	08 95       	ret
		}
		break;
		case INPUT:
		switch (port){
 482:	80 3b       	cpi	r24, 0xB0	; 176
 484:	b9 f0       	breq	.+46     	; 0x4b4 <__stack+0x55>
 486:	18 f4       	brcc	.+6      	; 0x48e <__stack+0x2f>
 488:	80 3a       	cpi	r24, 0xA0	; 160
 48a:	31 f0       	breq	.+12     	; 0x498 <__stack+0x39>
 48c:	08 95       	ret
 48e:	80 3c       	cpi	r24, 0xC0	; 192
 490:	f9 f0       	breq	.+62     	; 0x4d0 <__stack+0x71>
 492:	80 3d       	cpi	r24, 0xD0	; 208
 494:	59 f1       	breq	.+86     	; 0x4ec <__stack+0x8d>
 496:	08 95       	ret
			case A:CLR_BIT(DDRA,pin); break;
 498:	4a b3       	in	r20, 0x1a	; 26
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	b9 01       	movw	r22, r18
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__stack+0x47>
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	9a 95       	dec	r25
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__stack+0x43>
 4aa:	cb 01       	movw	r24, r22
 4ac:	80 95       	com	r24
 4ae:	84 23       	and	r24, r20
 4b0:	8a bb       	out	0x1a, r24	; 26
 4b2:	08 95       	ret
			case B:CLR_BIT(DDRB,pin); break;
 4b4:	47 b3       	in	r20, 0x17	; 23
 4b6:	21 e0       	ldi	r18, 0x01	; 1
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	b9 01       	movw	r22, r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__stack+0x63>
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	9a 95       	dec	r25
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__stack+0x5f>
 4c6:	cb 01       	movw	r24, r22
 4c8:	80 95       	com	r24
 4ca:	84 23       	and	r24, r20
 4cc:	87 bb       	out	0x17, r24	; 23
 4ce:	08 95       	ret
			case C:CLR_BIT(DDRC,pin); break;
 4d0:	44 b3       	in	r20, 0x14	; 20
 4d2:	21 e0       	ldi	r18, 0x01	; 1
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	b9 01       	movw	r22, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__stack+0x7f>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	9a 95       	dec	r25
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <__stack+0x7b>
 4e2:	cb 01       	movw	r24, r22
 4e4:	80 95       	com	r24
 4e6:	84 23       	and	r24, r20
 4e8:	84 bb       	out	0x14, r24	; 20
 4ea:	08 95       	ret
			case D:CLR_BIT(DDRD,pin); break;
 4ec:	41 b3       	in	r20, 0x11	; 17
 4ee:	21 e0       	ldi	r18, 0x01	; 1
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	b9 01       	movw	r22, r18
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__stack+0x9b>
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	9a 95       	dec	r25
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <__stack+0x97>
 4fe:	cb 01       	movw	r24, r22
 500:	80 95       	com	r24
 502:	84 23       	and	r24, r20
 504:	81 bb       	out	0x11, r24	; 17
 506:	08 95       	ret

00000508 <DIO_digitalWrite>:
	}
}

void DIO_digitalWrite(char PIN_NO,char STATE){
	char pin,port;
	pin =  PIN_NO & 0x0f;
 508:	98 2f       	mov	r25, r24
 50a:	9f 70       	andi	r25, 0x0F	; 15
	port = PIN_NO & 0xf0;
 50c:	80 7f       	andi	r24, 0xF0	; 240
	
	switch(STATE){
 50e:	66 23       	and	r22, r22
 510:	09 f4       	brne	.+2      	; 0x514 <DIO_digitalWrite+0xc>
 512:	42 c0       	rjmp	.+132    	; 0x598 <DIO_digitalWrite+0x90>
 514:	61 30       	cpi	r22, 0x01	; 1
 516:	09 f0       	breq	.+2      	; 0x51a <DIO_digitalWrite+0x12>
 518:	81 c0       	rjmp	.+258    	; 0x61c <DIO_digitalWrite+0x114>
		case HIGH:
		switch (port){
 51a:	80 3b       	cpi	r24, 0xB0	; 176
 51c:	b1 f0       	breq	.+44     	; 0x54a <DIO_digitalWrite+0x42>
 51e:	18 f4       	brcc	.+6      	; 0x526 <DIO_digitalWrite+0x1e>
 520:	80 3a       	cpi	r24, 0xA0	; 160
 522:	31 f0       	breq	.+12     	; 0x530 <DIO_digitalWrite+0x28>
 524:	08 95       	ret
 526:	80 3c       	cpi	r24, 0xC0	; 192
 528:	e9 f0       	breq	.+58     	; 0x564 <DIO_digitalWrite+0x5c>
 52a:	80 3d       	cpi	r24, 0xD0	; 208
 52c:	41 f1       	breq	.+80     	; 0x57e <DIO_digitalWrite+0x76>
 52e:	08 95       	ret
			case A:SET_BIT(PORTA,pin); break;
 530:	4b b3       	in	r20, 0x1b	; 27
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_digitalWrite+0x36>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	9a 95       	dec	r25
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_digitalWrite+0x32>
 542:	cb 01       	movw	r24, r22
 544:	84 2b       	or	r24, r20
 546:	8b bb       	out	0x1b, r24	; 27
 548:	08 95       	ret
			case B:SET_BIT(PORTB,pin); break;
 54a:	48 b3       	in	r20, 0x18	; 24
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	b9 01       	movw	r22, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_digitalWrite+0x50>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	9a 95       	dec	r25
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_digitalWrite+0x4c>
 55c:	cb 01       	movw	r24, r22
 55e:	84 2b       	or	r24, r20
 560:	88 bb       	out	0x18, r24	; 24
 562:	08 95       	ret
			case C:SET_BIT(PORTC,pin); break;
 564:	45 b3       	in	r20, 0x15	; 21
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	b9 01       	movw	r22, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_digitalWrite+0x6a>
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	9a 95       	dec	r25
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_digitalWrite+0x66>
 576:	cb 01       	movw	r24, r22
 578:	84 2b       	or	r24, r20
 57a:	85 bb       	out	0x15, r24	; 21
 57c:	08 95       	ret
			case D:SET_BIT(PORTD,pin); break;
 57e:	42 b3       	in	r20, 0x12	; 18
 580:	21 e0       	ldi	r18, 0x01	; 1
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	b9 01       	movw	r22, r18
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_digitalWrite+0x84>
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	9a 95       	dec	r25
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_digitalWrite+0x80>
 590:	cb 01       	movw	r24, r22
 592:	84 2b       	or	r24, r20
 594:	82 bb       	out	0x12, r24	; 18
 596:	08 95       	ret
		}
		break;
		case LOW:
		switch (port){
 598:	80 3b       	cpi	r24, 0xB0	; 176
 59a:	b9 f0       	breq	.+46     	; 0x5ca <DIO_digitalWrite+0xc2>
 59c:	18 f4       	brcc	.+6      	; 0x5a4 <DIO_digitalWrite+0x9c>
 59e:	80 3a       	cpi	r24, 0xA0	; 160
 5a0:	31 f0       	breq	.+12     	; 0x5ae <DIO_digitalWrite+0xa6>
 5a2:	08 95       	ret
 5a4:	80 3c       	cpi	r24, 0xC0	; 192
 5a6:	f9 f0       	breq	.+62     	; 0x5e6 <DIO_digitalWrite+0xde>
 5a8:	80 3d       	cpi	r24, 0xD0	; 208
 5aa:	59 f1       	breq	.+86     	; 0x602 <DIO_digitalWrite+0xfa>
 5ac:	08 95       	ret
			case A:CLR_BIT(PORTA,pin); break;
 5ae:	4b b3       	in	r20, 0x1b	; 27
 5b0:	21 e0       	ldi	r18, 0x01	; 1
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	b9 01       	movw	r22, r18
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_digitalWrite+0xb4>
 5b8:	66 0f       	add	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	9a 95       	dec	r25
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_digitalWrite+0xb0>
 5c0:	cb 01       	movw	r24, r22
 5c2:	80 95       	com	r24
 5c4:	84 23       	and	r24, r20
 5c6:	8b bb       	out	0x1b, r24	; 27
 5c8:	08 95       	ret
			case B:CLR_BIT(PORTB,pin); break;
 5ca:	48 b3       	in	r20, 0x18	; 24
 5cc:	21 e0       	ldi	r18, 0x01	; 1
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	b9 01       	movw	r22, r18
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_digitalWrite+0xd0>
 5d4:	66 0f       	add	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	9a 95       	dec	r25
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_digitalWrite+0xcc>
 5dc:	cb 01       	movw	r24, r22
 5de:	80 95       	com	r24
 5e0:	84 23       	and	r24, r20
 5e2:	88 bb       	out	0x18, r24	; 24
 5e4:	08 95       	ret
			case C:CLR_BIT(PORTC,pin); break;
 5e6:	45 b3       	in	r20, 0x15	; 21
 5e8:	21 e0       	ldi	r18, 0x01	; 1
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	b9 01       	movw	r22, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_digitalWrite+0xec>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	9a 95       	dec	r25
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_digitalWrite+0xe8>
 5f8:	cb 01       	movw	r24, r22
 5fa:	80 95       	com	r24
 5fc:	84 23       	and	r24, r20
 5fe:	85 bb       	out	0x15, r24	; 21
 600:	08 95       	ret
			case D:CLR_BIT(PORTD,pin); break;
 602:	42 b3       	in	r20, 0x12	; 18
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	b9 01       	movw	r22, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_digitalWrite+0x108>
 60c:	66 0f       	add	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	9a 95       	dec	r25
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_digitalWrite+0x104>
 614:	cb 01       	movw	r24, r22
 616:	80 95       	com	r24
 618:	84 23       	and	r24, r20
 61a:	82 bb       	out	0x12, r24	; 18
 61c:	08 95       	ret

0000061e <GI_voidEnable>:



void GI_voidEnable(void)
{
	SET_BIT(SREG,SPEG_I);
 61e:	8f b7       	in	r24, 0x3f	; 63
 620:	80 68       	ori	r24, 0x80	; 128
 622:	8f bf       	out	0x3f, r24	; 63
 624:	08 95       	ret

00000626 <TIMER0_init>:
 *  Author: Mahmoud Osman
 */ 
#include "TIMER_0/Timer0_PWM.h"

void TIMER0_init(void){
	DIO_pinMode(PIN_B3,OUTPUT);
 626:	61 e0       	ldi	r22, 0x01	; 1
 628:	83 eb       	ldi	r24, 0xB3	; 179
 62a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_pinMode>
	//DIO_pinMode(PIN_B4,OUTPUT);
	//DIO_digitalWrite(PIN_B4,HIGH);
	//SET TO FAST PWM
	SET_BIT(TCCR0,WGM00);
 62e:	83 b7       	in	r24, 0x33	; 51
 630:	80 64       	ori	r24, 0x40	; 64
 632:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
 634:	83 b7       	in	r24, 0x33	; 51
 636:	88 60       	ori	r24, 0x08	; 8
 638:	83 bf       	out	0x33, r24	; 51
	//select non inverting mode
	SET_BIT(TCCR0,COM01);
 63a:	83 b7       	in	r24, 0x33	; 51
 63c:	80 62       	ori	r24, 0x20	; 32
 63e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,COM00);
 640:	83 b7       	in	r24, 0x33	; 51
 642:	8f 7e       	andi	r24, 0xEF	; 239
 644:	83 bf       	out	0x33, r24	; 51
	
	//set prescaller to 1024
	
	SET_BIT(TCCR0,CS00);
 646:	83 b7       	in	r24, 0x33	; 51
 648:	81 60       	ori	r24, 0x01	; 1
 64a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS01);
 64c:	83 b7       	in	r24, 0x33	; 51
 64e:	8d 7f       	andi	r24, 0xFD	; 253
 650:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 652:	83 b7       	in	r24, 0x33	; 51
 654:	84 60       	ori	r24, 0x04	; 4
 656:	83 bf       	out	0x33, r24	; 51
 658:	08 95       	ret

0000065a <TIMER0_setDutyCycle>:
	
}


void TIMER0_setDutyCycle(uint8 speed){
	uint8 OCR_Val= speed*2.55;
 65a:	68 2f       	mov	r22, r24
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__floatsisf>
 666:	23 e3       	ldi	r18, 0x33	; 51
 668:	33 e3       	ldi	r19, 0x33	; 51
 66a:	43 e2       	ldi	r20, 0x23	; 35
 66c:	50 e4       	ldi	r21, 0x40	; 64
 66e:	0e 94 45 04 	call	0x88a	; 0x88a <__mulsf3>
 672:	0e 94 b0 03 	call	0x760	; 0x760 <__fixunssfsi>
	OCR0=OCR_Val;
 676:	6c bf       	out	0x3c, r22	; 60
 678:	08 95       	ret

0000067a <TIMER1_init>:

static void (*timer1_callback)() = NULL;

void TIMER1_init(void) {
	// Set Timer1 to CTC/normal mode
	TCCR1A = 0x00;
 67a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << WGM12) | (TIMER1_PRESCALER_256 & 0b111);
 67c:	8c e0       	ldi	r24, 0x0C	; 12
 67e:	8e bd       	out	0x2e, r24	; 46

	// Set Timer1 compare value for 50 ms interrupt
	OCR1A = 3125;
 680:	85 e3       	ldi	r24, 0x35	; 53
 682:	9c e0       	ldi	r25, 0x0C	; 12
 684:	9b bd       	out	0x2b, r25	; 43
 686:	8a bd       	out	0x2a, r24	; 42

	// Enable Timer1 compare interrupt
	TIMSK |= (1 << OCIE1A);
 688:	89 b7       	in	r24, 0x39	; 57
 68a:	80 61       	ori	r24, 0x10	; 16
 68c:	89 bf       	out	0x39, r24	; 57
 68e:	08 95       	ret

00000690 <TIMER1_setCallBack>:
}

void TIMER1_setCallBack(void (*ptr2fun)()) {
	timer1_callback = ptr2fun;
 690:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <timer1_callback+0x1>
 694:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <timer1_callback>
 698:	08 95       	ret

0000069a <__vector_6>:
}

// Timer1 ISR (every 50 ms)
ISR(TIMER1_COMPA_vect) {
 69a:	1f 92       	push	r1
 69c:	0f 92       	push	r0
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	0f 92       	push	r0
 6a2:	11 24       	eor	r1, r1
 6a4:	2f 93       	push	r18
 6a6:	3f 93       	push	r19
 6a8:	4f 93       	push	r20
 6aa:	5f 93       	push	r21
 6ac:	6f 93       	push	r22
 6ae:	7f 93       	push	r23
 6b0:	8f 93       	push	r24
 6b2:	9f 93       	push	r25
 6b4:	af 93       	push	r26
 6b6:	bf 93       	push	r27
 6b8:	ef 93       	push	r30
 6ba:	ff 93       	push	r31
	if (timer1_callback != NULL) {
 6bc:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <timer1_callback>
 6c0:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <timer1_callback+0x1>
 6c4:	30 97       	sbiw	r30, 0x00	; 0
 6c6:	09 f0       	breq	.+2      	; 0x6ca <__vector_6+0x30>
		timer1_callback();
 6c8:	09 95       	icall
	}
 6ca:	ff 91       	pop	r31
 6cc:	ef 91       	pop	r30
 6ce:	bf 91       	pop	r27
 6d0:	af 91       	pop	r26
 6d2:	9f 91       	pop	r25
 6d4:	8f 91       	pop	r24
 6d6:	7f 91       	pop	r23
 6d8:	6f 91       	pop	r22
 6da:	5f 91       	pop	r21
 6dc:	4f 91       	pop	r20
 6de:	3f 91       	pop	r19
 6e0:	2f 91       	pop	r18
 6e2:	0f 90       	pop	r0
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	0f 90       	pop	r0
 6e8:	1f 90       	pop	r1
 6ea:	18 95       	reti

000006ec <UART_init>:
	while (str[i] != '\0') {
		while (!(UCSRA & (1 << UDRE)));  // Wait until buffer is empty
		UDR = str[i];                     // Put data into buffer, sends the data
		i++;
	}
}
 6ec:	10 bc       	out	0x20, r1	; 32
 6ee:	87 e6       	ldi	r24, 0x67	; 103
 6f0:	89 b9       	out	0x09, r24	; 9
 6f2:	88 e1       	ldi	r24, 0x18	; 24
 6f4:	8a b9       	out	0x0a, r24	; 10
 6f6:	86 e0       	ldi	r24, 0x06	; 6
 6f8:	80 bd       	out	0x20, r24	; 32
 6fa:	08 95       	ret

000006fc <UART_onReceive>:

void UART_onReceive(void (*ptr2fun)(uint8 c)) {
	UART_receiveCallback = ptr2fun;
 6fc:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <UART_receiveCallback+0x1>
 700:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <UART_receiveCallback>
	// Enable the UART Receive Complete interrupt
	UCSRB |= (1 << RXCIE);
 704:	8a b1       	in	r24, 0x0a	; 10
 706:	80 68       	ori	r24, 0x80	; 128
 708:	8a b9       	out	0x0a, r24	; 10
 70a:	08 95       	ret

0000070c <__vector_11>:
}

ISR(USART_RXC_vect) {
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
	if (UART_receiveCallback) {
 72e:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <UART_receiveCallback>
 732:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <UART_receiveCallback+0x1>
 736:	30 97       	sbiw	r30, 0x00	; 0
 738:	11 f0       	breq	.+4      	; 0x73e <__vector_11+0x32>
		uint8 receivedChar = UDR;  // Read the received data
 73a:	8c b1       	in	r24, 0x0c	; 12
		UART_receiveCallback(receivedChar);  // Call the user-defined function
 73c:	09 95       	icall
	}
}
 73e:	ff 91       	pop	r31
 740:	ef 91       	pop	r30
 742:	bf 91       	pop	r27
 744:	af 91       	pop	r26
 746:	9f 91       	pop	r25
 748:	8f 91       	pop	r24
 74a:	7f 91       	pop	r23
 74c:	6f 91       	pop	r22
 74e:	5f 91       	pop	r21
 750:	4f 91       	pop	r20
 752:	3f 91       	pop	r19
 754:	2f 91       	pop	r18
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <__fixunssfsi>:
 760:	0e 94 24 04 	call	0x848	; 0x848 <__fp_splitA>
 764:	88 f0       	brcs	.+34     	; 0x788 <__fixunssfsi+0x28>
 766:	9f 57       	subi	r25, 0x7F	; 127
 768:	98 f0       	brcs	.+38     	; 0x790 <__fixunssfsi+0x30>
 76a:	b9 2f       	mov	r27, r25
 76c:	99 27       	eor	r25, r25
 76e:	b7 51       	subi	r27, 0x17	; 23
 770:	b0 f0       	brcs	.+44     	; 0x79e <__fixunssfsi+0x3e>
 772:	e1 f0       	breq	.+56     	; 0x7ac <__fixunssfsi+0x4c>
 774:	66 0f       	add	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	1a f0       	brmi	.+6      	; 0x784 <__fixunssfsi+0x24>
 77e:	ba 95       	dec	r27
 780:	c9 f7       	brne	.-14     	; 0x774 <__fixunssfsi+0x14>
 782:	14 c0       	rjmp	.+40     	; 0x7ac <__fixunssfsi+0x4c>
 784:	b1 30       	cpi	r27, 0x01	; 1
 786:	91 f0       	breq	.+36     	; 0x7ac <__fixunssfsi+0x4c>
 788:	0e 94 3e 04 	call	0x87c	; 0x87c <__fp_zero>
 78c:	b1 e0       	ldi	r27, 0x01	; 1
 78e:	08 95       	ret
 790:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__fp_zero>
 794:	67 2f       	mov	r22, r23
 796:	78 2f       	mov	r23, r24
 798:	88 27       	eor	r24, r24
 79a:	b8 5f       	subi	r27, 0xF8	; 248
 79c:	39 f0       	breq	.+14     	; 0x7ac <__fixunssfsi+0x4c>
 79e:	b9 3f       	cpi	r27, 0xF9	; 249
 7a0:	cc f3       	brlt	.-14     	; 0x794 <__fixunssfsi+0x34>
 7a2:	86 95       	lsr	r24
 7a4:	77 95       	ror	r23
 7a6:	67 95       	ror	r22
 7a8:	b3 95       	inc	r27
 7aa:	d9 f7       	brne	.-10     	; 0x7a2 <__fixunssfsi+0x42>
 7ac:	3e f4       	brtc	.+14     	; 0x7bc <__fixunssfsi+0x5c>
 7ae:	90 95       	com	r25
 7b0:	80 95       	com	r24
 7b2:	70 95       	com	r23
 7b4:	61 95       	neg	r22
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	08 95       	ret

000007be <__floatunsisf>:
 7be:	e8 94       	clt
 7c0:	09 c0       	rjmp	.+18     	; 0x7d4 <__floatsisf+0x12>

000007c2 <__floatsisf>:
 7c2:	97 fb       	bst	r25, 7
 7c4:	3e f4       	brtc	.+14     	; 0x7d4 <__floatsisf+0x12>
 7c6:	90 95       	com	r25
 7c8:	80 95       	com	r24
 7ca:	70 95       	com	r23
 7cc:	61 95       	neg	r22
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	99 23       	and	r25, r25
 7d6:	a9 f0       	breq	.+42     	; 0x802 <__floatsisf+0x40>
 7d8:	f9 2f       	mov	r31, r25
 7da:	96 e9       	ldi	r25, 0x96	; 150
 7dc:	bb 27       	eor	r27, r27
 7de:	93 95       	inc	r25
 7e0:	f6 95       	lsr	r31
 7e2:	87 95       	ror	r24
 7e4:	77 95       	ror	r23
 7e6:	67 95       	ror	r22
 7e8:	b7 95       	ror	r27
 7ea:	f1 11       	cpse	r31, r1
 7ec:	f8 cf       	rjmp	.-16     	; 0x7de <__floatsisf+0x1c>
 7ee:	fa f4       	brpl	.+62     	; 0x82e <__floatsisf+0x6c>
 7f0:	bb 0f       	add	r27, r27
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <__floatsisf+0x36>
 7f4:	60 ff       	sbrs	r22, 0
 7f6:	1b c0       	rjmp	.+54     	; 0x82e <__floatsisf+0x6c>
 7f8:	6f 5f       	subi	r22, 0xFF	; 255
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	8f 4f       	sbci	r24, 0xFF	; 255
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	16 c0       	rjmp	.+44     	; 0x82e <__floatsisf+0x6c>
 802:	88 23       	and	r24, r24
 804:	11 f0       	breq	.+4      	; 0x80a <__floatsisf+0x48>
 806:	96 e9       	ldi	r25, 0x96	; 150
 808:	11 c0       	rjmp	.+34     	; 0x82c <__floatsisf+0x6a>
 80a:	77 23       	and	r23, r23
 80c:	21 f0       	breq	.+8      	; 0x816 <__floatsisf+0x54>
 80e:	9e e8       	ldi	r25, 0x8E	; 142
 810:	87 2f       	mov	r24, r23
 812:	76 2f       	mov	r23, r22
 814:	05 c0       	rjmp	.+10     	; 0x820 <__floatsisf+0x5e>
 816:	66 23       	and	r22, r22
 818:	71 f0       	breq	.+28     	; 0x836 <__floatsisf+0x74>
 81a:	96 e8       	ldi	r25, 0x86	; 134
 81c:	86 2f       	mov	r24, r22
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	2a f0       	brmi	.+10     	; 0x82e <__floatsisf+0x6c>
 824:	9a 95       	dec	r25
 826:	66 0f       	add	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	88 1f       	adc	r24, r24
 82c:	da f7       	brpl	.-10     	; 0x824 <__floatsisf+0x62>
 82e:	88 0f       	add	r24, r24
 830:	96 95       	lsr	r25
 832:	87 95       	ror	r24
 834:	97 f9       	bld	r25, 7
 836:	08 95       	ret

00000838 <__fp_split3>:
 838:	57 fd       	sbrc	r21, 7
 83a:	90 58       	subi	r25, 0x80	; 128
 83c:	44 0f       	add	r20, r20
 83e:	55 1f       	adc	r21, r21
 840:	59 f0       	breq	.+22     	; 0x858 <__fp_splitA+0x10>
 842:	5f 3f       	cpi	r21, 0xFF	; 255
 844:	71 f0       	breq	.+28     	; 0x862 <__fp_splitA+0x1a>
 846:	47 95       	ror	r20

00000848 <__fp_splitA>:
 848:	88 0f       	add	r24, r24
 84a:	97 fb       	bst	r25, 7
 84c:	99 1f       	adc	r25, r25
 84e:	61 f0       	breq	.+24     	; 0x868 <__fp_splitA+0x20>
 850:	9f 3f       	cpi	r25, 0xFF	; 255
 852:	79 f0       	breq	.+30     	; 0x872 <__fp_splitA+0x2a>
 854:	87 95       	ror	r24
 856:	08 95       	ret
 858:	12 16       	cp	r1, r18
 85a:	13 06       	cpc	r1, r19
 85c:	14 06       	cpc	r1, r20
 85e:	55 1f       	adc	r21, r21
 860:	f2 cf       	rjmp	.-28     	; 0x846 <__fp_split3+0xe>
 862:	46 95       	lsr	r20
 864:	f1 df       	rcall	.-30     	; 0x848 <__fp_splitA>
 866:	08 c0       	rjmp	.+16     	; 0x878 <__fp_splitA+0x30>
 868:	16 16       	cp	r1, r22
 86a:	17 06       	cpc	r1, r23
 86c:	18 06       	cpc	r1, r24
 86e:	99 1f       	adc	r25, r25
 870:	f1 cf       	rjmp	.-30     	; 0x854 <__fp_splitA+0xc>
 872:	86 95       	lsr	r24
 874:	71 05       	cpc	r23, r1
 876:	61 05       	cpc	r22, r1
 878:	08 94       	sec
 87a:	08 95       	ret

0000087c <__fp_zero>:
 87c:	e8 94       	clt

0000087e <__fp_szero>:
 87e:	bb 27       	eor	r27, r27
 880:	66 27       	eor	r22, r22
 882:	77 27       	eor	r23, r23
 884:	cb 01       	movw	r24, r22
 886:	97 f9       	bld	r25, 7
 888:	08 95       	ret

0000088a <__mulsf3>:
 88a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__mulsf3x>
 88e:	0c 94 c9 04 	jmp	0x992	; 0x992 <__fp_round>
 892:	0e 94 bb 04 	call	0x976	; 0x976 <__fp_pscA>
 896:	38 f0       	brcs	.+14     	; 0x8a6 <__mulsf3+0x1c>
 898:	0e 94 c2 04 	call	0x984	; 0x984 <__fp_pscB>
 89c:	20 f0       	brcs	.+8      	; 0x8a6 <__mulsf3+0x1c>
 89e:	95 23       	and	r25, r21
 8a0:	11 f0       	breq	.+4      	; 0x8a6 <__mulsf3+0x1c>
 8a2:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_inf>
 8a6:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_nan>
 8aa:	11 24       	eor	r1, r1
 8ac:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_szero>

000008b0 <__mulsf3x>:
 8b0:	0e 94 1c 04 	call	0x838	; 0x838 <__fp_split3>
 8b4:	70 f3       	brcs	.-36     	; 0x892 <__mulsf3+0x8>

000008b6 <__mulsf3_pse>:
 8b6:	95 9f       	mul	r25, r21
 8b8:	c1 f3       	breq	.-16     	; 0x8aa <__mulsf3+0x20>
 8ba:	95 0f       	add	r25, r21
 8bc:	50 e0       	ldi	r21, 0x00	; 0
 8be:	55 1f       	adc	r21, r21
 8c0:	62 9f       	mul	r22, r18
 8c2:	f0 01       	movw	r30, r0
 8c4:	72 9f       	mul	r23, r18
 8c6:	bb 27       	eor	r27, r27
 8c8:	f0 0d       	add	r31, r0
 8ca:	b1 1d       	adc	r27, r1
 8cc:	63 9f       	mul	r22, r19
 8ce:	aa 27       	eor	r26, r26
 8d0:	f0 0d       	add	r31, r0
 8d2:	b1 1d       	adc	r27, r1
 8d4:	aa 1f       	adc	r26, r26
 8d6:	64 9f       	mul	r22, r20
 8d8:	66 27       	eor	r22, r22
 8da:	b0 0d       	add	r27, r0
 8dc:	a1 1d       	adc	r26, r1
 8de:	66 1f       	adc	r22, r22
 8e0:	82 9f       	mul	r24, r18
 8e2:	22 27       	eor	r18, r18
 8e4:	b0 0d       	add	r27, r0
 8e6:	a1 1d       	adc	r26, r1
 8e8:	62 1f       	adc	r22, r18
 8ea:	73 9f       	mul	r23, r19
 8ec:	b0 0d       	add	r27, r0
 8ee:	a1 1d       	adc	r26, r1
 8f0:	62 1f       	adc	r22, r18
 8f2:	83 9f       	mul	r24, r19
 8f4:	a0 0d       	add	r26, r0
 8f6:	61 1d       	adc	r22, r1
 8f8:	22 1f       	adc	r18, r18
 8fa:	74 9f       	mul	r23, r20
 8fc:	33 27       	eor	r19, r19
 8fe:	a0 0d       	add	r26, r0
 900:	61 1d       	adc	r22, r1
 902:	23 1f       	adc	r18, r19
 904:	84 9f       	mul	r24, r20
 906:	60 0d       	add	r22, r0
 908:	21 1d       	adc	r18, r1
 90a:	82 2f       	mov	r24, r18
 90c:	76 2f       	mov	r23, r22
 90e:	6a 2f       	mov	r22, r26
 910:	11 24       	eor	r1, r1
 912:	9f 57       	subi	r25, 0x7F	; 127
 914:	50 40       	sbci	r21, 0x00	; 0
 916:	9a f0       	brmi	.+38     	; 0x93e <__mulsf3_pse+0x88>
 918:	f1 f0       	breq	.+60     	; 0x956 <__mulsf3_pse+0xa0>
 91a:	88 23       	and	r24, r24
 91c:	4a f0       	brmi	.+18     	; 0x930 <__mulsf3_pse+0x7a>
 91e:	ee 0f       	add	r30, r30
 920:	ff 1f       	adc	r31, r31
 922:	bb 1f       	adc	r27, r27
 924:	66 1f       	adc	r22, r22
 926:	77 1f       	adc	r23, r23
 928:	88 1f       	adc	r24, r24
 92a:	91 50       	subi	r25, 0x01	; 1
 92c:	50 40       	sbci	r21, 0x00	; 0
 92e:	a9 f7       	brne	.-22     	; 0x91a <__mulsf3_pse+0x64>
 930:	9e 3f       	cpi	r25, 0xFE	; 254
 932:	51 05       	cpc	r21, r1
 934:	80 f0       	brcs	.+32     	; 0x956 <__mulsf3_pse+0xa0>
 936:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_inf>
 93a:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_szero>
 93e:	5f 3f       	cpi	r21, 0xFF	; 255
 940:	e4 f3       	brlt	.-8      	; 0x93a <__mulsf3_pse+0x84>
 942:	98 3e       	cpi	r25, 0xE8	; 232
 944:	d4 f3       	brlt	.-12     	; 0x93a <__mulsf3_pse+0x84>
 946:	86 95       	lsr	r24
 948:	77 95       	ror	r23
 94a:	67 95       	ror	r22
 94c:	b7 95       	ror	r27
 94e:	f7 95       	ror	r31
 950:	e7 95       	ror	r30
 952:	9f 5f       	subi	r25, 0xFF	; 255
 954:	c1 f7       	brne	.-16     	; 0x946 <__mulsf3_pse+0x90>
 956:	fe 2b       	or	r31, r30
 958:	88 0f       	add	r24, r24
 95a:	91 1d       	adc	r25, r1
 95c:	96 95       	lsr	r25
 95e:	87 95       	ror	r24
 960:	97 f9       	bld	r25, 7
 962:	08 95       	ret

00000964 <__fp_inf>:
 964:	97 f9       	bld	r25, 7
 966:	9f 67       	ori	r25, 0x7F	; 127
 968:	80 e8       	ldi	r24, 0x80	; 128
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	08 95       	ret

00000970 <__fp_nan>:
 970:	9f ef       	ldi	r25, 0xFF	; 255
 972:	80 ec       	ldi	r24, 0xC0	; 192
 974:	08 95       	ret

00000976 <__fp_pscA>:
 976:	00 24       	eor	r0, r0
 978:	0a 94       	dec	r0
 97a:	16 16       	cp	r1, r22
 97c:	17 06       	cpc	r1, r23
 97e:	18 06       	cpc	r1, r24
 980:	09 06       	cpc	r0, r25
 982:	08 95       	ret

00000984 <__fp_pscB>:
 984:	00 24       	eor	r0, r0
 986:	0a 94       	dec	r0
 988:	12 16       	cp	r1, r18
 98a:	13 06       	cpc	r1, r19
 98c:	14 06       	cpc	r1, r20
 98e:	05 06       	cpc	r0, r21
 990:	08 95       	ret

00000992 <__fp_round>:
 992:	09 2e       	mov	r0, r25
 994:	03 94       	inc	r0
 996:	00 0c       	add	r0, r0
 998:	11 f4       	brne	.+4      	; 0x99e <__fp_round+0xc>
 99a:	88 23       	and	r24, r24
 99c:	52 f0       	brmi	.+20     	; 0x9b2 <__fp_round+0x20>
 99e:	bb 0f       	add	r27, r27
 9a0:	40 f4       	brcc	.+16     	; 0x9b2 <__fp_round+0x20>
 9a2:	bf 2b       	or	r27, r31
 9a4:	11 f4       	brne	.+4      	; 0x9aa <__fp_round+0x18>
 9a6:	60 ff       	sbrs	r22, 0
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__fp_round+0x20>
 9aa:	6f 5f       	subi	r22, 0xFF	; 255
 9ac:	7f 4f       	sbci	r23, 0xFF	; 255
 9ae:	8f 4f       	sbci	r24, 0xFF	; 255
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	08 95       	ret

000009b4 <_exit>:
 9b4:	f8 94       	cli

000009b6 <__stop_program>:
 9b6:	ff cf       	rjmp	.-2      	; 0x9b6 <__stop_program>
